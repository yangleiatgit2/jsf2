package cn.uce.suc.bkg.biz.impl.operation;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.cxf.endpoint.Client;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.aop.framework.AopContext;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import cn.uce.base.page.Page;
import cn.uce.base.page.Pagination;
import cn.uce.suc.bkg.biz.impl.ia.WsClientSingleton;
import cn.uce.suc.bkg.biz.operation.IFreightDemandBiz;
import cn.uce.suc.bkg.biz.operation.IFreightDemandCombineBiz;
import cn.uce.suc.bkg.biz.operation.IFreightOrderBiz;
import cn.uce.suc.bkg.biz.operation.IIaConfBiz;
import cn.uce.suc.bkg.biz.operation.IIaMonitorBiz;
import cn.uce.suc.bkg.biz.operation.ILineGroupBiz;
import cn.uce.suc.bkg.biz.operation.ILineGroupDetailBiz;
import cn.uce.suc.bkg.biz.operation.ILineGroupRelBiz;
import cn.uce.suc.bkg.biz.price.IPricingRuleBiz;
import cn.uce.suc.bkg.cache.IAConfCacheProcessor;
import cn.uce.suc.bkg.cache.IAOperaTimeCacheProcessor;
import cn.uce.suc.bkg.cache.IATransportEffectiveCacheProcessor;
import cn.uce.suc.bkg.entity.operation.IaConf;
import cn.uce.suc.bkg.entity.operation.IaMonitor;
import cn.uce.suc.bkg.entity.operation.LineGroupRel;
import cn.uce.suc.bkg.exception.BkgIaException;
import cn.uce.suc.bkg.exception.BkgModuleException;
import cn.uce.suc.bkg.exception.BkgPriceRuleException;
import cn.uce.suc.bkg.service.datamain.OperationTimeService;
import cn.uce.suc.bkg.service.datamain.TransportEffectiveService;
import cn.uce.suc.bkg.service.operation.IaConfService;
import cn.uce.suc.bkg.service.price.PricingRuleTypeService;
import cn.uce.suc.bkg.vo.ia.FreigtCombineVo;
import cn.uce.suc.bkg.vo.ia.WsLineDetailsVo;
import cn.uce.suc.bkg.vo.ia.WsLineGroupVo;
import cn.uce.suc.bkg.vo.ia.WsRequestVo;
import cn.uce.suc.bkg.vo.ia.WsResponseVo;
import cn.uce.suc.bkg.vo.ia.WsSiteFreightInfoVo;
import cn.uce.suc.bkg.vo.operation.FreightDemandCombineVo;
import cn.uce.suc.bkg.vo.operation.FreightDemandVo;
import cn.uce.suc.bkg.vo.operation.FreightOrderCombineVo;
import cn.uce.suc.bkg.vo.operation.FreightOrderVo;
import cn.uce.suc.bkg.vo.operation.IaConfVo;
import cn.uce.suc.bkg.vo.operation.IaMonitorVo;
import cn.uce.suc.bkg.vo.operation.LineGroupDetailVo;
import cn.uce.suc.bkg.vo.operation.LineGroupVo;
import cn.uce.suc.common.biz.IOmgCmsOrgBiz;
import cn.uce.suc.common.biz.IOrgExtendBiz;
import cn.uce.suc.common.biz.ISystemConfigBiz;
import cn.uce.suc.common.cache.IADcSubOrgCacheProcessor;
import cn.uce.suc.common.cache.IATruckModelCacheProcessor;
import cn.uce.suc.common.constants.BkgConstants;
import cn.uce.suc.common.entity.SystemConfig;
import cn.uce.suc.common.ids.IIdsWorker;
import cn.uce.suc.common.ids.IdsConstants.IdsPrefix;
import cn.uce.suc.common.service.TruckCostManagementService;
import cn.uce.suc.common.util.CalendarUtil;
import cn.uce.suc.common.vo.OmgCmsOrgVo;
import cn.uce.utils.StringUtil;
import cn.uce.web.common.util.ObjectConvertUtil;

import com.alibaba.fastjson.JSON;

/**
 * @Description: 智能算法参数维护BIZ实现类
 * @author laizhendong
 * @date 2017年10月19日 下午08:41:03
 */
@Service("iaConfBiz")
@EnableAspectJAutoProxy(exposeProxy=true,proxyTargetClass=true) //TODO 开启代理执行事务，由于平台现在未启用，平台升级版本后删掉
@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
public class IaConfBiz implements IIaConfBiz {
	
	/**
	 * 注入智能算法参数维护Service
	 */
	@Resource
	private IaConfService iaConfService;
	
	
	/**
	 * 需求service
	 */
	@Resource
	private IFreightDemandBiz freightDemandBiz;
	
	/**
	 * 需求组合service
	 */
	@Resource
	private IFreightDemandCombineBiz freightDemandCombineBiz;
	/**
	 * 订单service
	 */
	@Resource
	private IFreightOrderBiz freightOrderBiz;
	
	/**
	 * 订单组合biz
	 */
	@Resource
	private FreightOrderCombineBiz freightOrderCombineBiz;
	
	/**
	 * 车型成本service
	 */
	@Resource
	private TruckCostManagementService truckCostManagementService;
	
	/**
	 * 时效service
	 */
	@Resource
	private TransportEffectiveService transportEffectiveService;
	
	/**
	 * 分拨时刻service
	 */
	@Resource
	private OperationTimeService operationTimeService;
	
	/**
	 * 扩展机构信息biz
	 */
	@Resource
	private IOrgExtendBiz orgExtendBiz;
	
	/**
	 * 班次biz
	 */
	@Resource
	private ILineGroupBiz lineGroupBiz;
	/**
	 * 详情biz
	 */
	@Resource
	private ILineGroupDetailBiz lineGroupDetailBiz;
	
	/**
	 * 机构biz
	 */
	@Resource
	private IOmgCmsOrgBiz omgCmsOrgBiz;
	
	/**
	 * 定价规则分类service
	 */
	@Resource
	private PricingRuleTypeService pricingRuleTypeService;
	
	/**
	 * 定价规则biz
	 */
	@Resource
	private IPricingRuleBiz pricingRuleBiz;
	
	/**
	 * 班次业务关系biz
	 */
	@Resource
	private ILineGroupRelBiz lineGroupRelBiz;
	
	/**
	 * redis流水号生成
	 */
	@Resource
	private IIdsWorker  redisIdsWorker;
	
	/**
	 * ws地址
	 */
	private static final String WS_URL = "WS_URL";
	
	/**
	 * 算法类型，用于获取系统参数
	 */
	private static final String ALGORITHM_TYPE = "ALGORITHM_TYPE";
	
	/**
	 * 系统参数biz
	 */
	@Resource
	private ISystemConfigBiz systemConfigBiz;
	
	/**
	 * 算法任务监控biz
	 */
	@Resource
	private IIaMonitorBiz iaMonitorBiz;
	
	
	/**日志*/
	protected final Logger logger = LoggerFactory.getLogger(this.getClass()); 
	
	/**
	 * @Description: 新增智能算法参数维护
	 * @param iaConf
	 * @return 受影响行数
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public int addIaConf(IaConfVo iaConfVo) {
		if (null == iaConfVo || StringUtil.isBlank(iaConfVo.getOrgCode())) {
			if (logger.isWarnEnabled()) {
				logger.warn("新增算法参数，参数错误！");
			}
			return 0;
		}
		//判断是否存在该机构的参数
		IaConfVo searchIaConfVo = new IaConfVo();
		searchIaConfVo.setOrgCode(iaConfVo.getOrgCode());
		List<IaConfVo> iaConfVos= iaConfService.findByCondition(searchIaConfVo);
		//新增时该机构参数已存在
		if (null != iaConfVos && !iaConfVos.isEmpty()) {
			throw new BkgModuleException("error.bkg.biz.IaConfBiz.orgIAConfIsExist");
		}
		//转换成entity
		IaConf iaConf = ObjectConvertUtil.convertObject(iaConfVo, IaConf.class);
		//设置默认值
		iaConf.setDeleteFlag(false);
		iaConf.setVersion(BkgConstants.DEFALUT_VERSION);
		return iaConfService.addIaConf(iaConf);
	}
	
	/**
	 * @Description: 修改智能算法参数维护
	 * @param iaConf 智能算法参数维护
	 * @return 受影响行数
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public int updateIaConf(IaConfVo iaConfVo) {
		if (null == iaConfVo || null == iaConfVo.getId() || StringUtil.isBlank(iaConfVo.getOrgCode())) {
			if (logger.isWarnEnabled()) {
				logger.warn("修改算法参数，参数错误！");
			}
			return 0;
		}
		//转换成entity
		IaConf iaConf = ObjectConvertUtil.convertObject(iaConfVo, IaConf.class);
		int count = iaConfService.updateById(iaConf);
		if (count < 1) {
			throw new BkgModuleException("error.bkg.biz.IaConfBiz.IAConfDataChange");
		}
		return count;
	}
	
	/**
	 * @Description: 删除智能算法参数维护
	 * @param id 主键
	 * @return 受影响行数
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public int deleteIaConf(Long id) {
		return iaConfService.deleteById(id);
	}
	
	/**
	 * @Description: 根据ID查询智能算法参数维护
	 * @param id 主键
	 * @return 智能算法参数维护
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	@Override
	public IaConf findById(Long id) {
		return iaConfService.findById(id);
	}
	
	/**
	 * @Description: 分页查询智能算法参数维护
	 * @param iaConfVo 智能算法参数维护
	 * @param page 分页参数
	 * @return 智能算法参数维护
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	public Pagination<IaConfVo> findByPagination(IaConfVo iaConfVo, Page page) {
		Pagination<IaConfVo> pagination = iaConfService.findByPagination(iaConfVo, page);
		return pagination;
	}

	/**
	 * 
	 * @Description: 根据条件查询参数
	 * @param iaConfVo
	 * @return
	 * @author laizhendong
	 * @date 2017年10月20日 上午11:31:33
	 */
	public List<IaConfVo> findByCondition(IaConfVo iaConfVo){
		return iaConfService.findByCondition(iaConfVo);
	}
	
	/**
	 * 
	 * @Description: 根据需求或订单、长期或短期调用算法生成班次，用于定时任务生成班次 
	 * @param combineType
	 * @param demandType
	 * @author laizhendong
	 * @date 2017年12月5日 上午10:26:34
	 */
	public void invokeIaByCombine(String combineType,String demandType){
		if (BkgConstants.COMBINE_SOURCE_TYPE_DEMAND.equals(combineType)) {
			//查询已生成的需求组合
			FreightDemandCombineVo searchDemandCombine = new FreightDemandCombineVo();
			searchDemandCombine.setDemandCombineType(demandType);
			searchDemandCombine.setDemandCombineStatus(BkgConstants.DEMAND_COMBINE_STATUS_CREATE);
			List<FreightDemandCombineVo> demandCombines = freightDemandCombineBiz.findByCondition(searchDemandCombine);
			if (null != demandCombines && !demandCombines.isEmpty()) {
				//遍历每个临时需求组合，计算报价不需进港和出港的班次一起计算
				for (FreightDemandCombineVo demandCombineVo : demandCombines) {
					runDemandCombineCatchException(demandCombineVo);
				}
			}
		}else if (BkgConstants.COMBINE_SOURCE_TYPE_ORDER.equals(combineType)) {
			//查询已生成订单组合
			FreightOrderCombineVo searchLongTermOrderCombine = new FreightOrderCombineVo();
			searchLongTermOrderCombine.setOrderCombineType(demandType);
			searchLongTermOrderCombine.setOrderCombineStatus(BkgConstants.ORDER_COMBINE_STATUS_CREATE);
			List<FreightOrderCombineVo> orderCombineVos = freightOrderCombineBiz.findByCondition(searchLongTermOrderCombine);
			if (null != orderCombineVos && !orderCombineVos.isEmpty()) {
				//遍历每个临时需求组合，计算报价不需进港和出港的班次一起计算
				for (FreightOrderCombineVo orderCombineVo : orderCombineVos) {
					//页面手动新增的订单组合，如果长期订单组合没有对应的兄弟组合则不排班
					if (BkgConstants.DEMAND_TYPE_LONG.equals(orderCombineVo.getOrderCombineType()) && StringUtil.isBlank(orderCombineVo.getBrotherOrderCombineCode())) {
						continue;
					}
					runOrderCombineCatchException(orderCombineVo);
				}
			}
		}
	}
	
	/** 
	 * @Description: 异步执行临时需求
	 * @param demandCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午8:31:08
	 */
	@Async("asyncExecutor")
	public void asyncRunDemandCombine(FreightDemandCombineVo demandCombineVo){
		runDemandCombineCatchException(demandCombineVo);
	}
	
	/** 
	 * @Description: 异步执行临时需求
	 * @param demandCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午8:31:08
	 */
	@Async("asyncExecutor")
	public void asyncRunDemandCombine(FreightDemandCombineVo demandCombineVo,FreightDemandCombineVo brotherDemandCombineVo){
		runDemandCombineCatchException(demandCombineVo);
		runDemandCombineCatchException(brotherDemandCombineVo);
	}
	
	/**
	 * 
	 * @Description: 异步执行临时订单组合
	 * @param orderCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午9:32:49
	 */
	@Async("asyncExecutor")
	public void asyncRunOrderCombine(FreightOrderCombineVo orderCombineVo){
		runOrderCombineCatchException(orderCombineVo);
	}
	
	/**
	 * 
	 * @Description: 异步执行长期订单组合
	 * @param orderCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午9:32:49
	 */
	@Async("asyncExecutor")
	public void asyncRunOrderCombine(FreightOrderCombineVo orderCombineVo,FreightOrderCombineVo brotherOrderCombineVo){
		runOrderCombineCatchException(orderCombineVo);
		runOrderCombineCatchException(brotherOrderCombineVo);
	}
	/**
	 * 
	 * @Description: 临时需求调用算法异常处理 
	 * @param freightDemandCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午2:56:09
	 */
	public void runDemandCombineCatchException(FreightDemandCombineVo demandCombineVo){
		String combineCode = demandCombineVo.getDemandCombineCode();
		try {
			if (iaMonitorBiz.checkIaTaskStatus(demandCombineVo) > 0) {
				runDemandCombine(demandCombineVo);
				//没有异常则更新任务状态为成功
				updateIaMonitorSuccess(combineCode);
			}
		} catch (BkgIaException e) {
			//异常回写错误信息
			updateIaMonitorErrorMsg(combineCode,e.getMessage());
			logger.error("需求组合编号【"+ combineCode + "】生成班次错误" + e);
		}catch (Exception e) {
			logger.error("需求组合编号【"+ combineCode + "】生成班次系统错误" + e);
			//进港异常回写错误信息
			updateIaMonitorErrorMsg(combineCode,"系统错误："+e.getMessage());
		}
	}
	
	/**
	 * 
	 * @Description: 订单组合调用算法生成班次
	 * @param orderCombineVo
	 * @author laizhendong
	 * @date 2017年12月4日 下午1:12:16
	 */
	public void runOrderCombineCatchException(FreightOrderCombineVo orderCombineVo){
		String combineCode = orderCombineVo.getOrderCombineCode();
		try {
			if (iaMonitorBiz.checkIaTaskStatus(orderCombineVo) > 0) {
				runOrderCombine(orderCombineVo);
				//没有异常则更新任务状态为成功
				updateIaMonitorSuccess(combineCode);
			}
		} catch (BkgIaException e) {
			//异常回写错误信息
			updateIaMonitorErrorMsg(combineCode,e.getMessage());
			logger.error("订单组合编号【"+ combineCode + "】生成班次错误" + e);
		}catch (Exception e) {
			//进港异常回写错误信息
			logger.error("订单组合编号【"+ combineCode + "】生成班次系统错误" + e);
			updateIaMonitorErrorMsg(combineCode,"系统错误："+e.getMessage());
		}
	}
	
	
	/**
	 * 
	 * @Description: 执行临时需求祝贺
	 * @param freightDemandCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年11月7日 下午5:16:03
	 */
	public int runDemandCombine(FreightDemandCombineVo demandCombineVo){
		int count = 0;
		//执行时间
		Date useTime = demandCombineVo.getExecuteTime();
		FreigtCombineVo freigtCombineVo = new FreigtCombineVo();
		String centerOrgCode = demandCombineVo.getStationCode();
		OmgCmsOrgVo centerOrgVo = omgCmsOrgBiz.findByBaseOrgCode(centerOrgCode);
		if (null == centerOrgVo) {
			if (logger.isDebugEnabled()) {
				logger.error("分拨中心【" + centerOrgCode +"】不存在,无法生成临时需求班次。");
			}
			throw new BkgIaException("分拨中心【" + centerOrgCode +"】不存在。");
		}
		freigtCombineVo.setCombineOrgCode(centerOrgCode);
		freigtCombineVo.setCombineOrgName(centerOrgVo.getOrgName());
		freigtCombineVo.setCombineCode(demandCombineVo.getDemandCombineCode());
		freigtCombineVo.setCombineSourceType(BkgConstants.COMBINE_SOURCE_TYPE_DEMAND);
		freigtCombineVo.setDemandType(demandCombineVo.getDemandCombineType());
		freigtCombineVo.setBusinessMode(demandCombineVo.getBusinessMode());
		freigtCombineVo.setUseTime(useTime);
		freigtCombineVo.setBrotherCombineCode(demandCombineVo.getBrotherDemandCombineCode());
		//调用算法生成班次
		List<LineGroupVo> lineGroupVos = executeIAByCombine(freigtCombineVo);
		if (null != lineGroupVos && !lineGroupVos.isEmpty()) {
			//事务保存班次、班次详情、班次关系、及更新需求或订单的状态和时间 
			count += ((IIaConfBiz) AopContext.currentProxy()).saveAndUpdateByLineGroup(lineGroupVos,freigtCombineVo);
			try {
				//计算报价
				count += pricingRuleBiz.calcPrice(lineGroupVos, freigtCombineVo);
			} catch (BkgPriceRuleException e) {
				logger.error("组合编号：【"+demandCombineVo.getDemandCombineCode()+"】生成报价错误:" + e);
			}
		}
		return count;
	}
	
	/**
	 * 
	 * @Description: 事务保存班次、班次详情、班次关系、及更新需求或订单的状态和时间 
	 * @param lineGroupVos
	 * @param freigtCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年12月5日 上午10:25:54
	 */
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public int saveAndUpdateByLineGroup(List<LineGroupVo> lineGroupVos,FreigtCombineVo freigtCombineVo){
		int count = 0;
		//组合类型，需求或订单
		String combineType = freigtCombineVo.getCombineSourceType();
		String combineCode = freigtCombineVo.getCombineCode();
		//保存班次
		count += lineGroupBiz.addLineGroup(lineGroupVos);
/*		if (true) {
			throw new BkgIaException("测试事务。。。。");
		}
*/		//保存班次关系
		count += saveLineGroupRel(lineGroupVos);
		//需求 更新需求状态、需求时间
		if (BkgConstants.COMBINE_SOURCE_TYPE_DEMAND.equals(combineType)) {
			//获取更新的需求,时间等。。
			List<FreightDemandVo> updDemandVos = getUpdateDemandVo(lineGroupVos);
			if (null != updDemandVos && !updDemandVos.isEmpty()) {
				freightDemandBiz.updateByDemandCode(updDemandVos);
			}
			//更新状态
			freightDemandCombineBiz.updateCombineStatus(freigtCombineVo.getCombineCode(),BkgConstants.DEMAND_COMBINE_STATUS_SHIFT_YES,BkgConstants.DEMAND_STATUS_QUOTE_NO);
		}else {
		//订单组合
			//获取更新的需求,时间等。。
			List<FreightOrderVo> updOrderVos = getUpdateOrderVo(lineGroupVos);
			if (null != updOrderVos && !updOrderVos.isEmpty()) {
				count += freightOrderBiz.updateTimeByOrderCode(updOrderVos);
			}
			//回写订单组合状态
			count += updateOrderStatus(combineCode);
		}
		return count;
	}
	
	/**
	 * 
	 * @Description: 运行订单组合生成班次
	 * @param orderCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年12月5日 上午10:25:54
	 */
	public int runOrderCombine(FreightOrderCombineVo orderCombineVo){
		int count = 0;
		//执行时间
		Date useTime = orderCombineVo.getExecuteTime();
		FreigtCombineVo freigtCombineVo = new FreigtCombineVo();
		String centerOrgCode = orderCombineVo.getOperStationCode();
		OmgCmsOrgVo centerOrgVo = omgCmsOrgBiz.findByBaseOrgCode(centerOrgCode);
		if (null == centerOrgVo) {
			if (logger.isDebugEnabled()) {
				logger.error("分拨中心【" + centerOrgCode +"】不存在,无法生成临时需求班次。");
			}
			throw new BkgIaException("分拨中心【" + centerOrgCode +"】不存在。");
		}
		//组装参数
		freigtCombineVo.setCombineOrgCode(centerOrgCode);
		freigtCombineVo.setCombineOrgName(centerOrgVo.getOrgName());
		freigtCombineVo.setCombineCode(orderCombineVo.getOrderCombineCode());
		freigtCombineVo.setCombineSourceType(BkgConstants.COMBINE_SOURCE_TYPE_ORDER);
		freigtCombineVo.setDemandType(orderCombineVo.getOrderCombineType());
		freigtCombineVo.setBusinessMode(orderCombineVo.getBusinessMode());
		freigtCombineVo.setUseTime(useTime);
		freigtCombineVo.setBrotherCombineCode(orderCombineVo.getBrotherOrderCombineCode());
		//调用算法生成班次
		List<LineGroupVo> lineGroupVos = executeIAByCombine(freigtCombineVo);
		if (null != lineGroupVos && !lineGroupVos.isEmpty()) {
			//事务保存班次、班次详情、班次关系、及更新需求或订单的状态和时间 
			count += ((IIaConfBiz) AopContext.currentProxy()).saveAndUpdateByLineGroup(lineGroupVos,freigtCombineVo);
			try {
				//计算报价
				count += pricingRuleBiz.calcPrice(lineGroupVos, freigtCombineVo);
			} catch (BkgPriceRuleException e) {
				logger.error("组合编号：【"+orderCombineVo.getOrderCombineCode()+"】生成报价错误:" + e);
			}
		}
		return count;
	}
	
	/**
	 * 
	 * @Description: 根据订单编号更新订单与订单组合编号
	 * @param combineCode
	 * @return
	 * @author laizhendong
	 * @date 2017年11月8日 下午2:25:48
	 */
	private int updateOrderStatus(String combineCode){
		int count = 0;
		/*FreightOrderVo updFreightOrderVo = new FreightOrderVo();
		updFreightOrderVo.setOrderCombinCode(combineCode);
		updFreightOrderVo.setOrderStatus(BkgConstants.ORDER_COMBINE_STATUS_SHIFT_YES);
		updFreightOrderVo.setUpdateEmp(BkgConstants.ZN_CREATE_EMP);
		updFreightOrderVo.setUpdateOrg(BkgConstants.ZN_CREATE_ORG);
		updFreightOrderVo.setUpdateTime(new Date());
		//更新订单状态
		count += freightOrderBiz.updStatusByCombineCode(updFreightOrderVo);*/
		
		FreightOrderCombineVo freightOrderCombineVo = new FreightOrderCombineVo();
		freightOrderCombineVo.setOrderCombineCode(combineCode);
		freightOrderCombineVo.setOrderCombineStatus(BkgConstants.ORDER_COMBINE_STATUS_SHIFT_YES);
		freightOrderCombineVo.setUpdateEmp(BkgConstants.ZN_CREATE_EMP);
		freightOrderCombineVo.setUpdateOrg(BkgConstants.ZN_CREATE_ORG);
		freightOrderCombineVo.setUpdateTime(new Date());
		//更新组合状态
		count += freightOrderCombineBiz.updStatusByCombineCode(freightOrderCombineVo);
		return count;
	}
	
	
	/**
	 * 
	 * @Description: 根据组合调用算法计算班次 
	 * @param freigtCombineVo
	 * @author laizhendong
	 * @date 2017年10月26日 下午4:26:12
	 */
	private List<LineGroupVo> executeIAByCombine(FreigtCombineVo freigtCombineVo){
		if (null == freigtCombineVo || StringUtil.isBlank(freigtCombineVo.getBusinessMode())
				|| StringUtil.isBlank(freigtCombineVo.getCombineCode()) || StringUtil.isBlank(freigtCombineVo.getCombineOrgCode())
				|| StringUtil.isBlank(freigtCombineVo.getCombineSourceType()) || StringUtil.isBlank(freigtCombineVo.getDemandType())) {
			if (logger.isWarnEnabled()) {
				logger.warn("根据组合调用算法参数错误！");
			}
			return null;
		}
		List<LineGroupVo> lineGroupVos = new ArrayList<LineGroupVo>();
		Map<Date, List<WsSiteFreightInfoVo>> wsSiteFreightInfoVosMap = getWsSiteFreightInfo(freigtCombineVo);
		if (null != wsSiteFreightInfoVosMap && !wsSiteFreightInfoVosMap.isEmpty()) {
			//业务模式
			String businessMode = freigtCombineVo.getBusinessMode();
			//这个用来存放长期时周几对应的返回结果
			Map<Integer, WsResponseVo> weekWsResponseVoMap = new HashMap<Integer, WsResponseVo>();
			Map<Integer, List<WsSiteFreightInfoVo>> oldWsSiteFreightInfoVoMap = new HashMap<Integer, List<WsSiteFreightInfoVo>>();
			for (Date date : wsSiteFreightInfoVosMap.keySet()) {
				//根据日期获取星期几
				Calendar cal = Calendar.getInstance();
			    cal.setTime(date);
			    int w = cal.get(Calendar.DAY_OF_WEEK) - 1;
			    if (w < 0){
			    	w = 0;
			    }
			    WsResponseVo wsResponseVo = null;
			    
			    //如果存在该星期几的返回结果，并且相同的网点与货量，那么直接获得班次不用再去调用算法
			    WsResponseVo oldResponseVo = weekWsResponseVoMap.get(w);
			    List<WsSiteFreightInfoVo> oldSiteFreightInfoVo = oldWsSiteFreightInfoVoMap.get(w);
			    List<WsSiteFreightInfoVo> newSiteFreightInfoVo = wsSiteFreightInfoVosMap.get(date);
			    if (oldResponseVo != null && oldSiteFreightInfoVo != null && isSameOrgAndVolume(oldSiteFreightInfoVo,newSiteFreightInfoVo,businessMode)) {
			    	wsResponseVo = oldResponseVo;
				}
			    if (wsResponseVo == null) {
					//设置参数
					WsRequestVo requestVo = getParameter(freigtCombineVo,date,newSiteFreightInfoVo);
					//校验缓存信息，根据中心编号校验算法参数、车型成本、分拨时刻、时效、集货点的缓存
					if (checkCacheStatus(freigtCombineVo)) {
						//调用webservice,返回json字符串
						String resultJson = invokeWebService(requestVo,freigtCombineVo);
						//json字符串转换成对象
						wsResponseVo = JSON.parseObject(resultJson, WsResponseVo.class);
					}
				}
			    if (null != wsResponseVo) {
					//返回失败标识，可能缺少基础数据
					if ( !wsResponseVo.getIsSuccess()) {
						logger.error("调用webservice错误，错误信息：" + wsResponseVo.getErrorMsg());
						throw new BkgIaException("算法调用返回错误：" + wsResponseVo.getErrorMsg());
					}
					List<LineGroupVo> newLineGroupVos = getLineGroupVo(wsResponseVo,freigtCombineVo,date);
					lineGroupVos.addAll(newLineGroupVos);
					if (!weekWsResponseVoMap.containsKey(w)) {
						//把该星期几的返回结果放进去
						weekWsResponseVoMap.put(w, wsResponseVo);
					}
					if (!oldWsSiteFreightInfoVoMap.containsKey(w)) {
						//把该星期几的请求参数放进去
						oldWsSiteFreightInfoVoMap.put(w, newSiteFreightInfoVo);
					}
				}
			}
		}else {
			throw new BkgIaException("获取网点货量信息为空，请检查需求时间或者货量是否正确！");
		}
		return lineGroupVos;
	}
	
	
	/**
	 * 
	 * @Description: 判断请求的网点货量信息是否和对应周一、二、、、、一样 
	 * @param oldSiteFreightInfo
	 * @param newSiteFreightInfo
	 * @param businessMode
	 * @return
	 * @author laizhendong
	 * @date 2017年12月22日 下午3:59:29
	 */
	private boolean isSameOrgAndVolume(List<WsSiteFreightInfoVo> oldSiteFreightInfo,List<WsSiteFreightInfoVo> newSiteFreightInfo,String businessMode){
		//网点货量信息大小不一致
		if (oldSiteFreightInfo == null || newSiteFreightInfo == null || oldSiteFreightInfo.size() != newSiteFreightInfo.size()) {
			return false;
		}
		//遍历所有存在的网点货量
		Map<String, WsSiteFreightInfoVo> oldWsSiteFreightInfoVoMap = new HashMap<String, WsSiteFreightInfoVo>();
		for (WsSiteFreightInfoVo oldSiteFreightInfoVo : oldSiteFreightInfo) {
			oldWsSiteFreightInfoVoMap.put(oldSiteFreightInfoVo.getOrgCode(), oldSiteFreightInfoVo);
		}
		//遍历新的货量看网点和货量是否一致
		for (WsSiteFreightInfoVo newSiteFreightInfoVo : newSiteFreightInfo) {
			String orgCode = newSiteFreightInfoVo.getOrgCode();
			WsSiteFreightInfoVo old = oldWsSiteFreightInfoVoMap.get(orgCode);
			if (old == null) {
				return false;
			}
			Double oldVolume = null;
			Double newVolume = null;
			//进港
			if (BkgConstants.BUSINESS_MODE_IN.equals(businessMode)) {
				oldVolume = old.getLongTerm_ArriveVolume();
				newVolume = newSiteFreightInfoVo.getLongTerm_ArriveVolume();
			}else{
			//出港
				oldVolume = old.getLongTerm_SendVolume();
				newVolume = newSiteFreightInfoVo.getLongTerm_SendVolume();
			}
			//该网点的货量比较是否相同
			if (oldVolume == null || newVolume == null || !oldVolume.equals(newVolume)) {
				return false;
			}
		}
		return true;
	}
	
	
	/**
	 * 
	 * @Description: 设置参数  
	 * @param requestVo
	 * @param freigtCombineVo
	 * @author laizhendong
	 * @date 2017年10月26日 下午4:35:06
	 */
	public WsRequestVo getParameter(FreigtCombineVo freigtCombineVo,Date date,List<WsSiteFreightInfoVo> wsSiteFreightInfoVos){
		WsRequestVo requestVo = new WsRequestVo();
		requestVo.setNodesFreight(wsSiteFreightInfoVos);
		//2 根据车辆费用维护获取车辆类型
		//setWsCar(requestVo,freigtCombineVo);
		//3根据分拨中心时刻表获取分拨与网点的最早出发时间和最晚到达时间
		//setWsOperationTime(requestVo,freigtCombineVo);
		//4根据时效
		//setWsTransportEffective(requestVo,freigtCombineVo);
		//5获取集货点
		//List<OrgExtendVo> orgExtendVos = orgExtendBiz.findByCombine(null);
		
		//6获取配置参数
		//setOrgIAConf(requestVo,freigtCombineVo);
		
		//时间转字符串，yyyy-MM-dd格式
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
		requestVo.setScheduleDate(sdf.format(date));
		requestVo.setDcOrgCode(freigtCombineVo.getCombineOrgCode());
		requestVo.setDemandType(freigtCombineVo.getDemandType());
		requestVo.setDcOrgName(freigtCombineVo.getCombineOrgName());
		return requestVo;
	}
	
	
	/**
	 * 
	 * @Description: 执行调用webserVice
	 * @param requestVo
	 * @author laizhendong
	 * @date 2017年10月26日 下午4:30:51
	 */
	public String invokeWebService(WsRequestVo requestVo,FreigtCombineVo freigtCombineVo){
		String bussunissModel = freigtCombineVo.getBusinessMode();
		String paramJson = JSON.toJSONString(requestVo );
		String combineCode = freigtCombineVo.getCombineCode();
		/*DynamicClientFactory factory = DynamicClientFactory.newInstance();
		//获取系统配置里的ws地址
		 *  
		 */
		SystemConfig systemConfig = systemConfigBiz.findCacheByCode(WS_URL);
		if (null == systemConfig || StringUtil.isBlank(systemConfig.getConfigValue())) {
			logger.error("没有获取到webservice地址，地址为空。");
			throw new BkgIaException("调用算法地址为空，请先维护好webservice地址！");
		}
		SystemConfig algorithnTypeConf = systemConfigBiz.findCacheByCode(ALGORITHM_TYPE);
		//默认是基于规则的
		int algorithmType = BkgConstants.ALGORITHM_TYPE_RULE;
		//查看系统参数算法方式是否存在
		if (null != algorithnTypeConf && StringUtil.isNotBlank(algorithnTypeConf.getConfigValue())) {
			//转换成int
			try {
				algorithmType = Integer.parseInt(algorithnTypeConf.getConfigValue().trim());
			} catch (Exception e) {
				logger.error("算法调用方式配置错误，请配置正整数1(基于规则)或2(基于模型):" + e);
				throw new BkgIaException("算法调用方式配置错误，请配置正整数1(基于规则)或2(基于模型)");
			}
			//是否在两种方式中 1（基于规则）2（基于模型）
			if (algorithmType != BkgConstants.ALGORITHM_TYPE_RULE &&  algorithmType != BkgConstants.ALGORITHM_TYPE_MODEL) {
				throw new BkgIaException("算法调用方式配置错误，请配置正整数1(基于规则)或2(基于模型)");
			}
		}
		String wsUrl = systemConfig.getConfigValue(); 
		//String wsUrl = "http://localhost:53292/BLSWebService.asmx?wsdl"; // 本地测试使用
		//String wsUrl = "http://10.202.2.197/BLSWebService.asmx?wsdl"; // 本地测试使用
		
		//String wsUrl = "http://10.201.1.85:8020/BLSWebService.asmx?wsdl"; // 开发环境测试使用
        Object[] results = null;
        String resultJson = "";
		try {
			 //Client client = factory.createClient(wsUrl);
			Client client = WsClientSingleton.getInstance(wsUrl);
			if (null == client) {
				throw new BkgIaException("获取ws client为空，请检查系统参数的webservice地址是否正确！"); 
			}
			//,xmlStr字符串，config1  0网点到中心、1 中心到网点
			/**
			 * ExecuteBLS(string jsonStr, int config1)
			 * config1:  1 中心到网点、2网点到中心
			 */
			if (logger.isInfoEnabled()) {
				logger.info("组合编号：【" + freigtCombineVo.getCombineCode() + "】,调用webservice获取班次,参数：" + JSON.toJSONString(requestVo));
			}
			Long startTime = System.currentTimeMillis();
			results = client.invoke("ExecuteBLS",paramJson,Integer.parseInt(bussunissModel),algorithmType);
			//System.out.println(System.currentTimeMillis()-startTime);
			resultJson = (String) results[0];
			//System.out.println(resultJson);
			//System.out.println((System.currentTimeMillis()-startTime));
			if (logger.isInfoEnabled()) {
				logger.info("调用webservice耗时：" + (System.currentTimeMillis()-startTime));
				logger.info("组合编号：【" + freigtCombineVo.getCombineCode() + "】,调用webservice获取班次,结果：" + resultJson);
			}
		} catch (Exception e) {
			logger.error("组合编号【" + combineCode + "】调用算法webService错误:" + e);
			throw new BkgIaException("调用webservice错误。"+ e.getMessage());
		}
		return resultJson;
	}
	
	/**
	 * 
	 * @Description: 设置货量信息
	 * @param requestVo
	 * @param freigtCombineVo
	 * @author laizhendong
	 * @date 2017年10月27日 下午1:57:48
	 */
	private Map<Date, List<WsSiteFreightInfoVo>> getWsSiteFreightInfo(FreigtCombineVo freigtCombineVo){
		String combineType = freigtCombineVo.getCombineSourceType();
		Map<Date, List<WsSiteFreightInfoVo>> dateSiteFreightInfoVoMap = null;
		//需求组合
		if (BkgConstants.COMBINE_SOURCE_TYPE_DEMAND.equals(combineType)) {
			dateSiteFreightInfoVoMap = getFreightDemand(freigtCombineVo);
		}else if (BkgConstants.COMBINE_SOURCE_TYPE_ORDER.equals(combineType)) {
		//订单组合
			dateSiteFreightInfoVoMap = getFreightOrder(freigtCombineVo);
		}
		return dateSiteFreightInfoVoMap;
	}
	
	/**
	 * 
	 * @Description: 获取每天货量
	 * @param freigtCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年12月5日 上午10:33:38
	 */
	private Map<Date, List<WsSiteFreightInfoVo>> getFreightDemand(FreigtCombineVo freigtCombineVo){
		//网点编号-订单货量vo
		Map<String, FreightDemandVo> demandMap = new HashMap<String, FreightDemandVo>();
		List<WsSiteFreightInfoVo> wsSiteFreightInfoVos = getDbFreightDemand(freigtCombineVo,demandMap);
		String businessMode = freigtCombineVo.getBusinessMode();
		String demandType = freigtCombineVo.getDemandType();
		Date useTime = freigtCombineVo.getUseTime();
		Map<Date, List<WsSiteFreightInfoVo>> dateSiteFreightLinkMap = new LinkedHashMap<Date, List<WsSiteFreightInfoVo>>();
		/**设置每个网点每天的货量*/
		if (!wsSiteFreightInfoVos.isEmpty()) {
			//获取给出时间的当月第一天
			Date firstDate = null;
			Date lastDate = null;
			//长期要计算出这个组合一个月的货量，这样就不用再去每次都去查数据库
			if (BkgConstants.DEMAND_COMBINE_TYPE_LONG.equals(demandType)) {
				firstDate = CalendarUtil.getMonthFristDay(useTime);
				//获取给出时间的当月最后一天
				lastDate = CalendarUtil.getMonthLastDay(useTime);
			}else {
			//临时只遍历一次
				firstDate = useTime;
				lastDate = firstDate;
			}
			Calendar calendar = Calendar.getInstance();
		    calendar.setTime(firstDate);
		    boolean stopFlag = false;
		    //从下个月第一天到最后一天获取每天的班次
		    while (!stopFlag) {
		    	Date executeDate = calendar.getTime();
				if (executeDate.after(lastDate)) {
					stopFlag = true;
				}else {
					List<WsSiteFreightInfoVo> siteFreightInfoVos = new ArrayList<WsSiteFreightInfoVo>();
					for (WsSiteFreightInfoVo siteFreightInfoVo : wsSiteFreightInfoVos) {
						WsSiteFreightInfoVo addSiteFreightInfoVo = ObjectConvertUtil.convertObject(siteFreightInfoVo, WsSiteFreightInfoVo.class);
						//需求网点
						String demandOrgCode = addSiteFreightInfoVo.getOrgCode();
						//网点对应需求货量
						FreightDemandVo freightDemandVo = demandMap.get(demandOrgCode);
						double volume = 0;
						if (freightDemandVo != null) {
							Date demandBeginTime = freightDemandVo.getDemandBeginTime();
							Date demandEndTime = freightDemandVo.getDemandEndTime();
							//如果调度的日期不在这个需求的计划里面时间
							if (executeDate.before(demandBeginTime) || executeDate.after(demandEndTime) ) {
								//demandMap.remove(demandOrgCode);
								continue;
							}
							if (BkgConstants.DEMAND_COMBINE_TYPE_LONG.equals(demandType)) {
								volume = getVolumeByTime(executeDate, freightDemandVo);
							}else {
								volume = freightDemandVo.getDayVolume();
							}
							//进港 中心到网点
							if (BkgConstants.BUSINESS_MODE_IN.equals(businessMode)) {
								// 到货量
								addSiteFreightInfoVo.setLongTerm_ArriveVolume(volume);
							}else if (BkgConstants.BUSINESS_MODE_OUT.equals(businessMode)){
								// 发货量
								addSiteFreightInfoVo.setLongTerm_SendVolume(volume);
							}
							siteFreightInfoVos.add(addSiteFreightInfoVo);
						}
					}
					if (!siteFreightInfoVos.isEmpty()) {
						dateSiteFreightLinkMap.put(executeDate, siteFreightInfoVos);
					}
					//加一天
					calendar.add(Calendar.DATE, 1);
				}
		    }
		    if (!demandMap.isEmpty()) {
		    	freigtCombineVo.setDemandMap(demandMap);
		    }
		}
		return dateSiteFreightLinkMap;
	}
	
	
	/**
	 * 
	 * @Description:  
	 * @param freigtCombineVo
	 * @param demandMap
	 * @return
	 * @author laizhendong
	 * @date 2017年12月5日 上午10:34:37
	 */
	private List<WsSiteFreightInfoVo> getDbFreightDemand(FreigtCombineVo freigtCombineVo,Map<String, FreightDemandVo> demandMap){
		String combineCode = freigtCombineVo.getCombineCode();
		String businessMode = freigtCombineVo.getBusinessMode();
		String demandType = freigtCombineVo.getDemandType();
		//中心编号
		String orgCode = freigtCombineVo.getCombineOrgCode();
		FreightDemandVo searchDemandVo = new FreightDemandVo();
		searchDemandVo.setDemandCombineCode(combineCode);
		//业务模式为空，那么是进港出港一起查
		if (StringUtil.isNotBlank(freigtCombineVo.getBusinessMode())) {
			searchDemandVo.setBusinessMode(freigtCombineVo.getBusinessMode());
		}
		//根据组合查询所有相关需求
		List<FreightDemandVo> freightDemandVos = freightDemandBiz.findByCombine(searchDemandVo);
		List<WsSiteFreightInfoVo> wsSiteFreightInfoVos = new ArrayList<WsSiteFreightInfoVo>();
		//不为空，那么组装需求调用算法参数
		if (null != freightDemandVos && !freightDemandVos.isEmpty()) {
			WsSiteFreightInfoVo wsSiteFreightInfoVo = null; 
			//生成网点货量参数
			for (FreightDemandVo freightDemandVo : freightDemandVos) {
				wsSiteFreightInfoVo = new WsSiteFreightInfoVo();
				//需求网点
				String demandSiteCode = freightDemandVo.getDemandSiteCode();
				//需求网点
				wsSiteFreightInfoVo.setOrgCode(demandSiteCode);
				wsSiteFreightInfoVo.setOrgName(freightDemandVo.getDemandSite());
				//进港 中心到网点
				if (BkgConstants.BUSINESS_MODE_IN.equals(businessMode)) {
					//进港 终点 如果与需求网点不一致，那这个终点是集货点
					String endStationCode = freightDemandVo.getEndStationCode();
					//终点 如果与需求网点不一致，那这个终点是集货点,
					if (!demandSiteCode.equals(endStationCode)) {
						//集货点
						wsSiteFreightInfoVo.setAssignedSubDCID(endStationCode);
					}
					//最晚到达时间
					SimpleDateFormat sdf = new SimpleDateFormat("HH:mm"); 
					wsSiteFreightInfoVo.setDCToNode_LatestArriveTime_Str(sdf.format(freightDemandVo.getArrivalTime()));
					//卸货时间
					wsSiteFreightInfoVo.setUnloadMinutes(freightDemandVo.getLayTime());
					//是否拼车
					wsSiteFreightInfoVo.setIfCarpool(freightDemandVo.getIsCarpool());
					//意向拼车点
					if (StringUtil.isNotBlank(freightDemandVo.getCarpoolSitesCodes())) {
						String[] carpoolNodes = freightDemandVo.getCarpoolSitesCodes().split(",");
						wsSiteFreightInfoVo.setCarpoolNodesID(carpoolNodes);
					}
					//进港限行
					String portLimit = freightDemandVo.getPortLimit();
					if (StringUtil.isNotBlank(portLimit) && StringUtil.isNotBlank(orgCode) && StringUtil.isNotBlank(demandType)) {
						String key = orgCode + BkgConstants.UNDER_LINE + demandType;
						//根据限行获取限行的车，这里如限行6.2 那么容积大于6.2的车都限行
						String[] portLimitAry = IATruckModelCacheProcessor.getLimitCarModel(key,portLimit);
						if (null != portLimitAry && portLimitAry.length > 0) {
							wsSiteFreightInfoVo.setDCToNode_BanTrucks(portLimitAry);
						}
					}
				}else {
					//出港 网点到中心
					String beginStationCode = freightDemandVo.getBeginStationCode();
					//终点 如果与需求网点不一致，那这个终点是集货点,
					if (!demandSiteCode.equals(beginStationCode)) {
						//集货点
						wsSiteFreightInfoVo.setAssignedSubDCID(beginStationCode);
					}
					//最早装货时间
					SimpleDateFormat sdf = new SimpleDateFormat("HH:mm"); 
					wsSiteFreightInfoVo.setNodeToDC_EarliestArriveTime_Str(sdf.format(freightDemandVo.getDepartureTime()));
					
					//装货时间
					wsSiteFreightInfoVo.setLoadMinutes(freightDemandVo.getLayTime());
					//是否拼车
					wsSiteFreightInfoVo.setIfCarpool(freightDemandVo.getIsCarpool());
					//意向拼车点
					if (StringUtil.isNotBlank(freightDemandVo.getCarpoolSitesCodes())) {
						String[] carpoolNodes = freightDemandVo.getCarpoolSitesCodes().split(",");
						wsSiteFreightInfoVo.setCarpoolNodesID(carpoolNodes);
					}
					//出港限行
					String departLimit = freightDemandVo.getDepartLimit();
					if (StringUtil.isNotBlank(departLimit) && StringUtil.isNotBlank(orgCode) && StringUtil.isNotBlank(demandType)) {
						//获取车型缓存key
						String key = orgCode + BkgConstants.UNDER_LINE + demandType;
						//根据限行获取限行的车，这里如限行6.2 那么容积大于6.2的车都限行
						String[] departLimitAry = IATruckModelCacheProcessor.getLimitCarModel(key,departLimit);
						if (null != departLimitAry && departLimitAry.length > 0) {
							wsSiteFreightInfoVo.setNodeToDC_BanTrucks(departLimitAry);
						}
					}
				}
				demandMap.put(demandSiteCode, freightDemandVo);
				//添加所有网点信息
				wsSiteFreightInfoVos.add(wsSiteFreightInfoVo);
			}
		}
		return wsSiteFreightInfoVos;
	}
	
	
	/**
	 * 
	 * @Description: 根据时间获取长期需求当天货量
	 * @param time
	 * @param freightDemandVo
	 * @return
	 * @author laizhendong
	 * @date 2017年11月29日 下午10:20:51
	 */
	private double getVolumeByTime(Date time,FreightDemandVo freightDemandVo){
		Calendar cal = Calendar.getInstance();
	    cal.setTime(time);
	    int w = cal.get(Calendar.DAY_OF_WEEK) - 1;
	    if (w < 0)
	        w = 0;
	    Double volume = null;
	    switch (w) {
	    //星期日
		case 0:
			volume = freightDemandVo.getSundayVolume();
			break;
		//星期1  
		case 1:
			volume = freightDemandVo.getMondayVolume();
			break;
		//星期二
		case 2:
			volume = freightDemandVo.getTuesdayVolume();
			break;
		//星期三
		case 3:
			volume = freightDemandVo.getWednesdayVolume();
			break;
		//星期四
		case 4:
			volume = freightDemandVo.getThursdayVolume();
			break;
		//星期五
		case 5:
			volume = freightDemandVo.getFridayVolume();
			break;
		//星期六
		case 6:
			volume = freightDemandVo.getSaturdayVolume();
			break;
		default:
			break;
		}
	    if (null == volume) {
	    	volume = new Double(0);
		}
		return volume;
	}
	
	
	private Map<Date, List<WsSiteFreightInfoVo>> getFreightOrder(FreigtCombineVo freigtCombineVo){
		//网点编号-订单货量vo
		Map<String, FreightOrderVo> orderMap = new HashMap<String, FreightOrderVo>();
		List<WsSiteFreightInfoVo> wsSiteFreightInfoVos = getDbFreightOrder(freigtCombineVo,orderMap);
		String businessMode = freigtCombineVo.getBusinessMode();
		String demandType = freigtCombineVo.getDemandType();
		Date useTime = freigtCombineVo.getUseTime();
		Map<Date, List<WsSiteFreightInfoVo>> dateSiteFreightLinkMap = new LinkedHashMap<Date, List<WsSiteFreightInfoVo>>();
		/**设置每个网点每天的货量*/
		if (!wsSiteFreightInfoVos.isEmpty()) {
			//获取给出时间的当月第一天
			Date firstDate = null;
			Date lastDate = null;
			//长期要计算出这个组合一个月的货量，这样就不用再去每次都去查数据库
			if (BkgConstants.DEMAND_COMBINE_TYPE_LONG.equals(demandType)) {
				firstDate = CalendarUtil.getMonthFristDay(useTime);
				//获取给出时间的当月最后一天
				lastDate = CalendarUtil.getMonthLastDay(useTime);
			}else {
			//临时只遍历一次
				firstDate = useTime;
				lastDate = firstDate;
			}
			Calendar calendar = Calendar.getInstance();
		    calendar.setTime(firstDate);
		    boolean stopFlag = false;
		    //从下个月第一天到最后一天获取每天的班次
		    while (!stopFlag) {
		    	Date executeDate = calendar.getTime();
				if (executeDate.after(lastDate)) {
					stopFlag = true;
				}else {
					List<WsSiteFreightInfoVo> siteFreightInfoVos = new ArrayList<WsSiteFreightInfoVo>();
					for (WsSiteFreightInfoVo siteFreightInfoVo : wsSiteFreightInfoVos) {
						WsSiteFreightInfoVo addSiteFreightInfoVo = ObjectConvertUtil.convertObject(siteFreightInfoVo, WsSiteFreightInfoVo.class);
						//需求网点
						String demandOrgCode = addSiteFreightInfoVo.getOrgCode();
						//网点对应需求货量
						FreightOrderVo freightOrderVo = orderMap.get(demandOrgCode);
						double volume = 0;
						if (freightOrderVo != null) {
							Date orderBeginTime = freightOrderVo.getOrderStartTime();
							Date orderEndTime = freightOrderVo.getOrderEndTime();
							//兼容上个版本，上个版本是executeEndTime为执行结束时间,现在改为与需求统一，这里做下兼容
							if (orderEndTime == null) {
								orderEndTime = freightOrderVo.getExecuteEndTime();
							}
							//如果调度的日期不在这个需求的计划里面时间
							if (executeDate.before(orderBeginTime) || executeDate.after(orderEndTime) ) {
								//orderMap.remove(demandOrgCode);
								continue;
							}
							if (BkgConstants.DEMAND_COMBINE_TYPE_LONG.equals(demandType)) {
								volume = getVolumeByTime(executeDate, freightOrderVo);
							}else {
								volume = freightOrderVo.getDayVolume();
							}
							//进港 中心到网点
							if (BkgConstants.BUSINESS_MODE_IN.equals(businessMode)) {
								// 到货量
								addSiteFreightInfoVo.setLongTerm_ArriveVolume(volume);
							}else if (BkgConstants.BUSINESS_MODE_OUT.equals(businessMode)){
								// 发货量
								addSiteFreightInfoVo.setLongTerm_SendVolume(volume);
							}
							siteFreightInfoVos.add(addSiteFreightInfoVo);
						}
					}
					if (!siteFreightInfoVos.isEmpty()) {
						dateSiteFreightLinkMap.put(executeDate, siteFreightInfoVos);
					}
					//加一天
					calendar.add(Calendar.DATE, 1);
				}
		    }
		    if (!orderMap.isEmpty()) {
		    	freigtCombineVo.setOrderMap(orderMap);
		    }
		}
		return dateSiteFreightLinkMap;
	}
	
	
	/**
	 * 
	 * @Description: 获得订单网点货量信息，用来设置参数 
	 * @param freigtCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年11月8日 下午2:36:40
	 */
	private List<WsSiteFreightInfoVo> getDbFreightOrder(FreigtCombineVo freigtCombineVo,Map<String, FreightOrderVo> orderMap){
		String combineCode = freigtCombineVo.getCombineCode();
		String businessMode = freigtCombineVo.getBusinessMode();
		String demandType = freigtCombineVo.getDemandType();
		String orgCode = freigtCombineVo.getCombineOrgCode();
		FreightOrderVo searchOrderVo = new FreightOrderVo();
		searchOrderVo.setOrderCombinCode(combineCode);
		searchOrderVo.setOrderStatus(BkgConstants.ORDER_COMBINE_STATUS_CREATE);
		//业务模式不为空，那么是进港出港一起查
		if (StringUtil.isNotBlank(freigtCombineVo.getBusinessMode())) {
			searchOrderVo.setBusinessMode(freigtCombineVo.getBusinessMode());
		}
		List<FreightOrderVo> freightOrderVos = freightOrderBiz.findByCombine(searchOrderVo);
		List<WsSiteFreightInfoVo> wsSiteFreightInfoVos = new ArrayList<WsSiteFreightInfoVo>();
		WsSiteFreightInfoVo wsSiteFreightInfoVo = null; 
		//生成网点货量参数
		for (FreightOrderVo freightOrderVo : freightOrderVos) {
			wsSiteFreightInfoVo = new WsSiteFreightInfoVo();
			//需求网点
			String demandSiteCode = freightOrderVo.getDemandSiteCode();
			//网点编号
			wsSiteFreightInfoVo.setOrgCode(demandSiteCode);
			wsSiteFreightInfoVo.setOrgName(freightOrderVo.getDemandSite());
			orderMap.put(demandSiteCode, freightOrderVo);
			//进港 中心到网点
			if (BkgConstants.BUSINESS_MODE_IN.equals(businessMode)) {
				//进港 终点 如果与需求网点不一致，那这个终点是集货点
				String endStationCode = freightOrderVo.getEndStationCode();
				//终点 如果与需求网点不一致，那这个终点是集货点,
				if (!demandSiteCode.equals(endStationCode)) {
					//所属集货点
					wsSiteFreightInfoVo.setAssignedSubDCID(endStationCode);
				}
				//最晚到达时间
				SimpleDateFormat sdf = new SimpleDateFormat("HH:mm"); 
				wsSiteFreightInfoVo.setDCToNode_LatestArriveTime_Str(sdf.format(freightOrderVo.getArrivalTime()));
				//卸货时间
				wsSiteFreightInfoVo.setUnloadMinutes(freightOrderVo.getLayTime());
				//是否拼车
				wsSiteFreightInfoVo.setIfCarpool(freightOrderVo.getIsCarpool());
				//意向拼车点
				//wsSiteFreightInfoVo.setCarpoolNodesID(freightOrderVo.getCarpoolSitesCode());
				//意向拼车点
				if (StringUtil.isNotBlank(freightOrderVo.getCarpoolSitesCode())) {
					String[] carpoolNodes = freightOrderVo.getCarpoolSitesCode().split(",");
					wsSiteFreightInfoVo.setCarpoolNodesID(carpoolNodes);
				}
				//进港限行
				String portLimit = freightOrderVo.getPortLimit();
				if (StringUtil.isNotBlank(portLimit)&& StringUtil.isNotBlank(orgCode) && StringUtil.isNotBlank(demandType)) {
					//获取车型缓存key
					String key = orgCode + BkgConstants.UNDER_LINE + demandType;
					//根据限行获取限行的车，这里如限行6.2 那么容积大于6.2的车都限行
					String[] portLimitAry = IATruckModelCacheProcessor.getLimitCarModel(key,portLimit);
					if (null != portLimitAry && portLimitAry.length > 0) {
						wsSiteFreightInfoVo.setDCToNode_BanTrucks(portLimitAry);
					}
				}
				
			}else {
				//进港 终点 如果与需求网点不一致，那这个终点是集货点
				String beginStationCode = freightOrderVo.getBeginStationCode();
				//终点 如果与需求网点不一致，那这个终点是集货点,
				if (!demandSiteCode.equals(beginStationCode)) {
					//所属集货点
					wsSiteFreightInfoVo.setAssignedSubDCID(beginStationCode);
				}
				//最早装货时间
				SimpleDateFormat sdf = new SimpleDateFormat("HH:mm"); 
				wsSiteFreightInfoVo.setNodeToDC_EarliestArriveTime_Str(sdf.format(freightOrderVo.getDepartureTime()));
				
				//装货时间
				wsSiteFreightInfoVo.setLoadMinutes(freightOrderVo.getLayTime());
				//是否拼车
				wsSiteFreightInfoVo.setIfCarpool(freightOrderVo.getIsCarpool());
				//意向拼车点
				if (StringUtil.isNotBlank(freightOrderVo.getCarpoolSitesCode())) {
					String[] carpoolNodes = freightOrderVo.getCarpoolSitesCode().split(",");
					wsSiteFreightInfoVo.setCarpoolNodesID(carpoolNodes);
				}
				//出港限行
				String departLimit = freightOrderVo.getDepartLimit();
				if (StringUtil.isNotBlank(departLimit) && StringUtil.isNotBlank(orgCode) && StringUtil.isNotBlank(demandType)) {
					//获取车型缓存key
					String key = orgCode + BkgConstants.UNDER_LINE + demandType;
					//根据限行获取限行的车，这里如限行6.2 那么容积大于6.2的车都限行
					String[] departLimitAry = IATruckModelCacheProcessor.getLimitCarModel(key,departLimit);
					if (null != departLimitAry && departLimitAry.length > 0) {
						wsSiteFreightInfoVo.setNodeToDC_BanTrucks(departLimitAry);
					}
				}
			}
			//添加所有网点信息
			wsSiteFreightInfoVos.add(wsSiteFreightInfoVo);
		}
		return wsSiteFreightInfoVos;
	}
	
	/**
	 * 
	 * @Description:根据时间获取长期订单当天货量
	 * @param time
	 * @param freightOrderVo
	 * @return
	 * @author laizhendong
	 * @date 2017年11月29日 下午10:22:22
	 */
	private double getVolumeByTime(Date time,FreightOrderVo freightOrderVo){
		Calendar cal = Calendar.getInstance();
	    cal.setTime(time);
	    int w = cal.get(Calendar.DAY_OF_WEEK) - 1;
	    if (w < 0)
	        w = 0;
	    Double volume = null;
	    switch (w) {
	    //星期日
		case 0:
			volume = freightOrderVo.getSundayVolume();
			break;
		//星期1  
		case 1:
			volume = freightOrderVo.getMondayVolume();
			break;
		//星期二
		case 2:
			volume = freightOrderVo.getTuesdayVolume();
			break;
		//星期三
		case 3:
			volume = freightOrderVo.getWednesdayVolume();
			break;
		//星期四
		case 4:
			volume = freightOrderVo.getThursdayVolume();
			break;
		//星期五
		case 5:
			volume = freightOrderVo.getFridayVolume();
			break;
		//星期六
		case 6:
			volume = freightOrderVo.getSaturdayVolume();
			break;
		default:
			break;
		}
	    if (null == volume) {
	    	volume = new Double(0);
		}
		return volume;
	}
	
	/**
	 * 
	 * @Description:根据返回结果获得班次信息，包括班次详情、班次业务关系 
	 * @param requestVo
	 * @param wsResponseVo
	 * @param freigtCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年11月7日 下午6:28:54
	 */
	private List<LineGroupVo> getLineGroupVo(WsResponseVo wsResponseVo,FreigtCombineVo freigtCombineVo,Date date){
		List<WsLineGroupVo> wsLineGroupVos = wsResponseVo.getLineGroups();
		LineGroupVo lineGroupVo = null;
		//获得组合编号
		String combineCode = freigtCombineVo.getCombineCode();
		//获得组合类型
		String combineType = freigtCombineVo.getCombineSourceType();
		//获得业务模式
		String businessMode = freigtCombineVo.getBusinessMode();
		Date useTime = date;
		List<LineGroupVo> lineGroupVos = new ArrayList<LineGroupVo>();
		for (WsLineGroupVo wsLineGroupVo : wsLineGroupVos) {
			lineGroupVo = new LineGroupVo();
			//车辆类型
			lineGroupVo.setCarType(wsLineGroupVo.getCarType());
			lineGroupVo.setStartOrgCode(wsLineGroupVo.getStartOrgCode());
			//设置开始站机构名称
			OmgCmsOrgVo startOrgVo = omgCmsOrgBiz.findByBaseOrgCode(wsLineGroupVo.getStartOrgCode());
			if (null != startOrgVo) {
				lineGroupVo.setStartOrgName(startOrgVo.getOrgName());
			}
			
			lineGroupVo.setEndOrgCode(wsLineGroupVo.getEndOrgCode());
			//设置目的站机构名称
			OmgCmsOrgVo endOrgVo = omgCmsOrgBiz.findByBaseOrgCode(wsLineGroupVo.getEndOrgCode());
			if (null != endOrgVo) {
				lineGroupVo.setEndOrgName(endOrgVo.getOrgName());
			}
			//班次编号
			String lineGroupCode = redisIdsWorker.nextId(IdsPrefix.BC);
			lineGroupVo.setLineGroupCode(lineGroupCode);
			//TODO 待修改
			lineGroupVo.setLineGroupName(lineGroupCode);
			//班次类型,调用算法生成为自动生成
			lineGroupVo.setLineGroupType(BkgConstants.LINE_GROUP_TYPE_AUTO);
			lineGroupVo.setLineGroupDistance(wsLineGroupVo.getLineGroupDistance());
			//设置总货量
			lineGroupVo.setTotalVolume(wsLineGroupVo.getTotalVolume());
			//设置总时长
			lineGroupVo.setTotalTime(wsLineGroupVo.getTotalTime().intValue());
			//设置装载率
			lineGroupVo.setLoadFactor(wsLineGroupVo.getLoadRate());
			//设置需求类型
			lineGroupVo.setRequiType(Integer.parseInt(freigtCombineVo.getCombineSourceType()));
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
			//出发时间
			String departTimeStr= wsLineGroupVo.getDepartTime();
			if (StringUtil.isNotBlank(departTimeStr)) {
				String departTime = sdf1.format(useTime)+ " " + departTimeStr + ":00";
				try {
					lineGroupVo.setDepartTime(sdf.parse(departTime));
				} catch (ParseException e) {
					logger.error("班次详情到达时间转换错误:" + e);
				}
			}
			//到达时间
			String arrivalTimeStr= wsLineGroupVo.getArrivalTime();
			if (StringUtil.isNotBlank(arrivalTimeStr)) {
				String arrivalTime = sdf1.format(useTime)+ " " + arrivalTimeStr + ":00";
				try {
					lineGroupVo.setArrivalTime(sdf.parse(arrivalTime));
				} catch (ParseException e) {
					logger.error("班次详情到达时间转换错误:" + e);
				}
			}
			
			//班次来源
			lineGroupVo.setResource(combineType);
			//需求类型  待确认,数据库int型，订单、需求string类型
			lineGroupVo.setRequiType(Integer.parseInt(freigtCombineVo.getDemandType()));
			//组合编号
			if (BkgConstants.COMBINE_SOURCE_TYPE_DEMAND.equals(combineType)) {
				lineGroupVo.setRequiCombinCode(combineCode);
			}else if (BkgConstants.COMBINE_SOURCE_TYPE_ORDER.equals(combineType)) {
				lineGroupVo.setOrderCombinCode(combineCode);
			}
			//业务模式 1进港、2出港
			lineGroupVo.setBusinessMode(businessMode);
			//设置默认值
			lineGroupVo.setStatus(BkgConstants.LINE_GROUP_STATUS_CREATE);
			lineGroupVo.setDeleteFlag(false);
			//设置创建人、创建机构、创建时间
			lineGroupVo.setCreateEmp(BkgConstants.ZN_CREATE_EMP);
			lineGroupVo.setCreateOrg(BkgConstants.ZN_CREATE_ORG);
			lineGroupVo.setVersion(BkgConstants.DEFALUT_VERSION);
			//封装班次详情、及班次与需求、订单关系
			List<LineGroupDetailVo> lineGroupDetailVos = getLineGroupDetailAndRel(lineGroupVo,wsLineGroupVo,freigtCombineVo,date);
			lineGroupVo.setLineGroupDetailVos(lineGroupDetailVos);
			lineGroupVos.add(lineGroupVo);
		}
		return lineGroupVos;
	}
	
	/**
	 * 
	 * @Description: 获得班次详情及班次与业务关系
	 * @param lineGroupVo
	 * @param wsLineGroupVo
	 * @param freigtCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年11月6日 上午12:57:26
	 */
	private List<LineGroupDetailVo> getLineGroupDetailAndRel(LineGroupVo lineGroupVo,WsLineGroupVo wsLineGroupVo,FreigtCombineVo freigtCombineVo,Date useTime){
		List<WsLineDetailsVo> wsLineDetails = wsLineGroupVo.getLineDetails();
		List<LineGroupDetailVo> lineGroupDetailVos = null;
		List<LineGroupRel> lineGroupRels = null;
		//经停站不为空，封装班次详情及班次与业务关系
		if (null != wsLineDetails && !wsLineDetails.isEmpty()) {
			lineGroupDetailVos = new ArrayList<LineGroupDetailVo>();
			lineGroupRels = new ArrayList<LineGroupRel>();
			String combineType = freigtCombineVo.getCombineSourceType();
			for (WsLineDetailsVo wsLineDetailVo : wsLineDetails) {
				String orgCode = wsLineDetailVo.getOrgCode();
				if (StringUtil.isBlank(orgCode)) {
					if (logger.isErrorEnabled()) {
						logger.error("生成班次错误，经停站数据错误:" +  JSON.toJSONString(wsLineGroupVo));
						break;
					}
				}
				LineGroupDetailVo lineGroupDetailVo = new LineGroupDetailVo();
				//设置经停站名称
				OmgCmsOrgVo wayPoint = omgCmsOrgBiz.findByBaseOrgCode(orgCode);
				if (null != wayPoint) {
					lineGroupDetailVo.setWayPointName(wayPoint.getOrgName());
				}
				lineGroupDetailVo.setLineGroupCode(lineGroupVo.getLineGroupCode());
				//设置经停点顺序
				lineGroupDetailVo.setSort(wsLineDetailVo.getSort());
				//设置网点该班次货量
				lineGroupDetailVo.setVolume(wsLineDetailVo.getVolume());
				//设置经停点编号
				lineGroupDetailVo.setWayPointCode(orgCode);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
				String endTime = sdf1.format(useTime)+ " " + wsLineDetailVo.getEndTime() + ":00";
				try {
					lineGroupDetailVo.setEndTime(sdf.parse(endTime));
				} catch (ParseException e) {
					logger.error("班次详情到达时间转换错误:" + e);
				}
				lineGroupDetailVo.setLoadUnloadTime(wsLineDetailVo.getLoadUnloadTime().intValue());
				lineGroupDetailVo.setDistance(wsLineDetailVo.getDistance());
				lineGroupDetailVo.setNextWayDistance(wsLineDetailVo.getNextWayDistance());
				lineGroupDetailVo.setRuningTime(wsLineDetailVo.getRunningTime().intValue());
				//设置创建人、创建机构、创建时间，创建人和创建机构默认是智能排班
				lineGroupDetailVo.setCreateEmp(BkgConstants.ZN_CREATE_EMP);
				lineGroupDetailVo.setCreateOrg(BkgConstants.ZN_CREATE_ORG);
				lineGroupDetailVo.setCreateTime(new Date());
				//需求只保存需求组合号
				if (BkgConstants.COMBINE_SOURCE_TYPE_DEMAND.equals(combineType)) {
					Map<String, FreightDemandVo> demandMap = freigtCombineVo.getDemandMap();
					if (demandMap != null && demandMap.get(orgCode) != null) {
						//设置组合编号
						lineGroupDetailVo.setRequiCombinCode(demandMap.get(orgCode).getDemandCombineCode());
					}
				}
				//订单的话要保存订单组合号和需求组合号
				if (BkgConstants.COMBINE_SOURCE_TYPE_ORDER.equals(combineType)) {
					Map<String, FreightOrderVo> orderMap = freigtCombineVo.getOrderMap();
					if (orderMap != null && orderMap.get(orgCode) != null) {
						//设置组合编号
						lineGroupDetailVo.setRequiCombinCode(orderMap.get(orgCode).getDemandCombineCode());
						lineGroupDetailVo.setOrderCombinCode(orderMap.get(orgCode).getOrderCombinCode());
					}
				}
				lineGroupDetailVos.add(lineGroupDetailVo);
				
				//进港第一个是中心不用保存关系，出港最后一个是中心也不用保存班次业务关系
				boolean isSaveLineGroupRel = (BkgConstants.BUSINESS_MODE_IN.equals(freigtCombineVo.getBusinessMode()) && wsLineDetailVo.getSort() != 1) 
						|| (BkgConstants.BUSINESS_MODE_OUT.equals(freigtCombineVo.getBusinessMode()) && wsLineDetailVo.getSort() != wsLineDetails.size()); 
				if (isSaveLineGroupRel) {
					//保存班次业务编号关系
					LineGroupRel lineGroupRel = new LineGroupRel();
					lineGroupRel.setLineGroupCode(lineGroupVo.getLineGroupCode());
					if (BkgConstants.COMBINE_SOURCE_TYPE_DEMAND.equals(combineType) && null != freigtCombineVo.getDemandMap()) {
						FreightDemandVo freightDemandVo = freigtCombineVo.getDemandMap().get(orgCode);
						if (null != freightDemandVo) {
							lineGroupRel.setBusinessCode(freightDemandVo.getDemandCode());
						}
					}else if(BkgConstants.COMBINE_SOURCE_TYPE_ORDER.equals(combineType) && null != freigtCombineVo.getOrderMap()){
						FreightOrderVo freightOrderVo = freigtCombineVo.getOrderMap().get(orgCode);
						if (null != freightOrderVo) {
							lineGroupRel.setBusinessCode(freightOrderVo.getOrderCode());
						}
					}
					//设置业务模式、需求类型
					lineGroupRel.setBusinessMode(freigtCombineVo.getDemandType());
					lineGroupRel.setBusinessType(freigtCombineVo.getBusinessMode());
					lineGroupRel.setCreateEmp(BkgConstants.ZN_CREATE_EMP);
					lineGroupRel.setCreateOrg(BkgConstants.ZN_CREATE_ORG);
					lineGroupRel.setCreateTime(new Date());
					//设置删除标识
					lineGroupRel.setDeleteFalg(0);
					lineGroupRels.add(lineGroupRel);
					
				}
			}
			if (null != lineGroupRels && !lineGroupRels.isEmpty()) {
				lineGroupVo.setLineGroupRels(lineGroupRels);
			}
		}
		//返回班次详情
		return lineGroupDetailVos;
		
	}
	
	/**
	 * 
	 * @Description: 根据班次保存组合关系详情
	 * @param lineGroupVos
	 * @return
	 * @author laizhendong
	 * @date 2017年11月6日 下午5:07:37
	 */
	private int saveLineGroupRel(List<LineGroupVo> lineGroupVos){
		int count = 0;
		if (null != lineGroupVos && !lineGroupVos.isEmpty()) {
			for (LineGroupVo lineGroupVo : lineGroupVos) {
				List<LineGroupRel> lineGroupRels = lineGroupVo.getLineGroupRels();
				if (null != lineGroupRels && !lineGroupRels.isEmpty()) {
					for (LineGroupRel lineGroupRel : lineGroupRels) {
						count += lineGroupRelBiz.addLineGroupRel(lineGroupRel);
					}
				}
			}
		}
		return count;
	}
	
	/**
	 * 
	 * @Description: 根据班次获得修改的需求或订单信息
	 * @param lineGroupVos
	 * @return
	 * @author laizhendong
	 * @date 2017年11月21日 下午6:23:00
	 */
	private List<FreightDemandVo> getUpdateDemandVo(List<LineGroupVo> lineGroupVos){
		List<FreightDemandVo> updateDemandVos = null;
		if (null != lineGroupVos && !lineGroupVos.isEmpty()) {
			Map<String/**业务编号*/, List<LineGroupVo>> lineGroupVoMap = new HashMap<String, List<LineGroupVo>>();
			List<LineGroupVo> lineGroups = null;
			for (LineGroupVo lineGroupVo : lineGroupVos) {
				List<LineGroupRel> lineGroupRels = lineGroupVo.getLineGroupRels();
				if (null != lineGroupRels && !lineGroupRels.isEmpty()) {
					for (LineGroupRel lineGroupRel : lineGroupRels) {
						String businessCode = lineGroupRel.getBusinessCode();
						if (StringUtil.isNotBlank(businessCode)) {
							if (null == lineGroupVoMap.get(businessCode)) {
								lineGroups = new ArrayList<LineGroupVo>();
							}else {
								lineGroups = lineGroupVoMap.get(businessCode);
							}
							lineGroups.add(lineGroupVo);
							lineGroupVoMap.put(businessCode, lineGroups);
						}
					}
				}
			}
			//取该业务编号的最大和最小时间
			if (null != lineGroupVoMap && !lineGroupVoMap.isEmpty()) {
				updateDemandVos = new ArrayList<FreightDemandVo>();
				for (String businessCode : lineGroupVoMap.keySet()) {
					List<LineGroupVo> businessCodeLineGroups = lineGroupVoMap.get(businessCode);
					if (null != businessCodeLineGroups && !businessCodeLineGroups.isEmpty()) {
						Date minExecuteTime = null;
						Date maxExecuteTime = null;
						////取该业务编号的最大和最小时间
						for (LineGroupVo lineGroupVo : businessCodeLineGroups) {
							Date departTime = lineGroupVo.getDepartTime();
							if (null == minExecuteTime || departTime.before(minExecuteTime)) {
								minExecuteTime = departTime;
							}
							Date arrivalTime = lineGroupVo.getArrivalTime();
							if (null == maxExecuteTime || arrivalTime.after(maxExecuteTime)) {
								maxExecuteTime = arrivalTime;
							}
						}
						//更新需求信息，执行开始、结束，实际出发、到达时间
						FreightDemandVo updDemandVo = new FreightDemandVo();
						//设置业务编号
						updDemandVo.setDemandCode(businessCode);
						updDemandVo.setExecuteBeginTime(minExecuteTime);
						updDemandVo.setExecuteEndTime(maxExecuteTime);
						updDemandVo.setActualDepartureTime(minExecuteTime);
						updDemandVo.setActualArrivalTime(maxExecuteTime);
						//添加更新的需求vo
						updateDemandVos.add(updDemandVo);
					}
				}
			}
		}
		return updateDemandVos;
	}
	
	/**
	 * 
	 * @Description: 获取需要更新的订单信息、主要更新时间等信息
	 * @param lineGroupVos
	 * @return
	 * @author laizhendong
	 * @date 2017年11月21日 下午5:03:30
	 */
	private List<FreightOrderVo> getUpdateOrderVo(List<LineGroupVo> lineGroupVos){
		List<FreightOrderVo> updateOrderVos = null;
		if (null != lineGroupVos && !lineGroupVos.isEmpty()) {
			Map<String/**业务编号*/, List<LineGroupVo>> lineGroupVoMap = new HashMap<String, List<LineGroupVo>>();
			List<LineGroupVo> lineGroups = null;
			for (LineGroupVo lineGroupVo : lineGroupVos) {
				List<LineGroupRel> lineGroupRels = lineGroupVo.getLineGroupRels();
				if (null != lineGroupRels && !lineGroupRels.isEmpty()) {
					for (LineGroupRel lineGroupRel : lineGroupRels) {
						String businessCode = lineGroupRel.getBusinessCode();
						if (StringUtil.isNotBlank(businessCode)) {
							if (null == lineGroupVoMap.get(businessCode)) {
								lineGroups = new ArrayList<LineGroupVo>();
							}else {
								lineGroups = lineGroupVoMap.get(businessCode);
							}
							lineGroups.add(lineGroupVo);
							lineGroupVoMap.put(businessCode, lineGroups);
						}
					}
				}
			}
			//取该业务编号的最大和最小时间
			if (null != lineGroupVoMap && !lineGroupVoMap.isEmpty()) {
				updateOrderVos = new ArrayList<FreightOrderVo>();
				for (String businessCode : lineGroupVoMap.keySet()) {
					List<LineGroupVo> businessCodeLineGroups = lineGroupVoMap.get(businessCode);
					if (null != businessCodeLineGroups && !businessCodeLineGroups.isEmpty()) {
						Date minExecuteTime = null;
						Date maxExecuteTime = null;
						////取该业务编号的最大和最小时间
						for (LineGroupVo lineGroupVo : businessCodeLineGroups) {
							Date departTime = lineGroupVo.getDepartTime();
							if (null == minExecuteTime || departTime.before(minExecuteTime)) {
								minExecuteTime = departTime;
							}
							Date arrivalTime = lineGroupVo.getArrivalTime();
							if (null == maxExecuteTime || arrivalTime.after(maxExecuteTime)) {
								maxExecuteTime = arrivalTime;
							}
						}
						//设置订单编号、设置更新的执行开始和执行结束时间
						FreightOrderVo updOrderVo = new FreightOrderVo();
						updOrderVo.setOrderCode(businessCode);
						updOrderVo.setExecuteStartTime(minExecuteTime);
						updOrderVo.setExecuteEndTime(maxExecuteTime);
						updateOrderVos.add(updOrderVo);
					}
				}
			}
		}
		return updateOrderVos;
	}
	
	
	/**
	 * 
	 * @Description: 根据组合编号更新任务为成功状态
	 * @param combineCode
	 * @return
	 * @author laizhendong
	 * @date 2017年11月29日 下午8:08:06
	 */
	private int updateIaMonitorSuccess(String combineCode){
		int count = 0;
		if (StringUtil.isBlank(combineCode)) {
			return count;
		}
		IaMonitorVo dbIaMonitorVo = iaMonitorBiz.findByCombineCode(combineCode);
		if (null != dbIaMonitorVo) {
			IaMonitor update = new IaMonitor();
			update.setId(dbIaMonitorVo.getId());
			update.setCreateTime(null);
			update.setErrorMsg("");
			update.setUpdateTime(new Date());
			update.setStatus(BkgConstants.MONITOR_STATUS_SUCCESS);
			count += iaMonitorBiz.updateIaMonitor(update);
		}
		return count;
	}
	
	/**
	 * 
	 * @Description: 根据组合编号更新任务的错误状态及错误信息 
	 * @param combineCode
	 * @param e
	 * @return
	 * @author laizhendong
	 * @date 2017年11月29日 下午8:06:59
	 */
	private int updateIaMonitorErrorMsg(String combineCode,String errorMsg){
		int count = 0;
		if (StringUtil.isBlank(combineCode)) {
			return count;
		}
		//获取数据库任务
		IaMonitorVo dbIaMonitorVo = iaMonitorBiz.findByCombineCode(combineCode);
		if (null != dbIaMonitorVo) {
			//更新状态为失败，保存错误信息
			IaMonitor update = new IaMonitor();
			update.setId(dbIaMonitorVo.getId());
			update.setUpdateTime(new Date());
			update.setCreateTime(null);
			update.setStatus(BkgConstants.MONITOR_STATUS_FAIL);
			update.setErrorMsg(errorMsg);
			count += iaMonitorBiz.updateIaMonitor(update);
		}
		return count;
		
	}

	@Override
	public void autoInvokeIaByLongTermDemandCombine() {
		invokeIaByCombine(BkgConstants.COMBINE_SOURCE_TYPE_DEMAND,BkgConstants.DEMAND_TYPE_LONG);
	}

	@Override
	public void autoInvokeIaByShortTermDemandCombine() {
		invokeIaByCombine(BkgConstants.COMBINE_SOURCE_TYPE_DEMAND,BkgConstants.DEMAND_TYPE_TEMP);
	}

	@Override
	public void autoInvokeIaByLongTermOrderCombine() {
		invokeIaByCombine(BkgConstants.COMBINE_SOURCE_TYPE_ORDER,BkgConstants.DEMAND_TYPE_LONG);
		
	}

	@Override
	public void autoInvokeIaByShortTermOrderCombine() {
		invokeIaByCombine(BkgConstants.COMBINE_SOURCE_TYPE_ORDER,BkgConstants.DEMAND_TYPE_TEMP);
	}
	
	/**
	 * 这里是为了防止项目启动初始化缓存缓慢，采用调用时取获取缓存 ，没有的话在去设置缓存
	 * @Description: 校验缓存状态
	 * @param orgCode 分拨中心编号
	 * @param businessType 业务类型
	 * @return
	 * @author laizhendong
	 * @date 2017年12月6日 下午3:46:54
	 */
	private boolean checkCacheStatus(FreigtCombineVo freigtCombineVo){
		String orgCode = freigtCombineVo.getCombineOrgCode();
		String orgName = freigtCombineVo.getCombineOrgName();
		//需求类型
		String demandType = freigtCombineVo.getDemandType();
		if (StringUtil.isNotBlank(orgCode) && StringUtil.isNotBlank(demandType)) {
			//校验算法参数缓存是否存在
			if (!IAConfCacheProcessor.isExist(orgCode)) {
				throw new BkgIaException("不存在分拨中心【" + orgCode + orgName + "】的算法参数！");
			}
			//车型成本缓存
			if (!IATruckModelCacheProcessor.isExist(orgCode + BkgConstants.UNDER_LINE + demandType)) {
				String demandTypeName = BkgConstants.DEMAND_COMBINE_TYPE_LONG.equals(demandType) ? "长期" : "临时";
				throw new BkgIaException("不存在分拨中心【" + orgCode + orgName + "】"+ demandTypeName +"的车型成本！");
			}
			//分拨时刻缓存
			if (!IAOperaTimeCacheProcessor.isExist(orgCode)) {
				throw new BkgIaException("不存在分拨中心【" + orgCode + orgName + "】的分拨时刻数据。");
			}
			//时效缓存
			if (!IATransportEffectiveCacheProcessor.isExist(orgCode)) {
				throw new BkgIaException("不存在分拨中心【" + orgCode + orgName + "】的时效数据。");
			}
			//集货点缓存
			if (!IADcSubOrgCacheProcessor.isExist(orgCode)) {
				//可以没有集货点
				//throw new BkgIaException("不存在分拨中心【" + orgCode + orgName + "】的集货点数据。");
			}
		}
		return true;
	}
}