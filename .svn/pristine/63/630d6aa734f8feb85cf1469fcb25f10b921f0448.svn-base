package cn.uce.suc.bkg.service.price;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import cn.uce.base.page.Page;
import cn.uce.base.page.Pagination;
import cn.uce.suc.bkg.entity.price.PricingRuleDetailRel;
import cn.uce.suc.bkg.vo.price.PricingRuleDetailRelVo;
import cn.uce.suc.bkg.dao.price.IPricingRuleDetailRelDao;

/**
 * @Description: 定价规则详情与网点关系表Service类
 * @author laizhendong
 * @date 2017年11月05日 下午01:41:44
 */
@Service("pricingRuleDetailRelService")
public class PricingRuleDetailRelService {
	
	/**
	 * 注入定价规则详情与网点关系表Dao
	 */
	@Resource
	private IPricingRuleDetailRelDao pricingRuleDetailRelDao;
	
	/**
	 * @Description: 新增定价规则详情与网点关系表
	 * @param pricingRuleDetailRel 定价规则详情与网点关系表
	 * @return 受影响行数
	 * @author laizhendong
	 * @date 2017年11月05日 下午01:41:44
	 */
	public int addPricingRuleDetailRel(PricingRuleDetailRel pricingRuleDetailRel) {
		return pricingRuleDetailRelDao.insert(pricingRuleDetailRel);
	}
	
	/**
	 * @Description: 修改定价规则详情与网点关系表
	 * @param pricingRuleDetailRel 定价规则详情与网点关系表
	 * @return 受影响行数
	 * @author laizhendong
	 * @date 2017年11月05日 下午01:41:44
	 */
	public int updateById(PricingRuleDetailRel pricingRuleDetailRel) {
		return pricingRuleDetailRelDao.updateById(pricingRuleDetailRel);
	}
	
	/**
	 * @Description: 删除定价规则详情与网点关系表
	 * @param id 主键
	 * @return 受影响行数
	 * @author laizhendong
	 * @date 2017年11月05日 下午01:41:44
	 */
	public int deleteById(Long id) {
		return pricingRuleDetailRelDao.deleteById(id);
	}
	
	/**
	 * @Description: 根据ID查询定价规则详情与网点关系表
	 * @param id 主键
	 * @return 定价规则详情与网点关系表
	 * @author laizhendong
	 * @date 2017年11月05日 下午01:41:44
	 */
	public PricingRuleDetailRel findById(Long id) {
		return pricingRuleDetailRelDao.findById(id);
	}
	
	/**
	 * @Description: 分页查询定价规则详情与网点关系表
	 * @param pricingRuleDetailRelVo 定价规则详情与网点关系表
	 * @param page 分页参数
	 * @return 定价规则详情与网点关系表
	 * @author laizhendong
	 * @date 2017年11月05日 下午01:41:44
	 */
	public Pagination<PricingRuleDetailRelVo> findByPagination(PricingRuleDetailRelVo pricingRuleDetailRelVo, Page page) {
		Pagination<PricingRuleDetailRelVo> paginationPricingRuleDetailRel = pricingRuleDetailRelDao.findByPagination(pricingRuleDetailRelVo, page);
		return paginationPricingRuleDetailRel;
	}
	/**
	 * 
	 * @Description: 根据详情id批量删除
	 * @param pricingRuleDetailRel
	 * @return
	 * @author laizhendong
	 * @date 2017年11月13日 上午10:36:11
	 */
	public int batchUpdateByDetailId(PricingRuleDetailRel pricingRuleDetailRel){
		return pricingRuleDetailRelDao.batchUpdateByDetailId(pricingRuleDetailRel);
	}
	
	/**
	 * 
	 * @Description: 根据条件查询详情关系
	 * @param pricingRuleDetailRelVo
	 * @return
	 * @author laizhendong
	 * @date 2017年11月13日 上午10:57:32
	 */
	public List<PricingRuleDetailRelVo> findByCondition(PricingRuleDetailRelVo pricingRuleDetailRelVo){
		return pricingRuleDetailRelDao.findByCondition(pricingRuleDetailRelVo);
	}
}