package cn.uce.suc.bkg.biz.impl.operation;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import cn.uce.base.page.Page;
import cn.uce.base.page.Pagination;
import cn.uce.suc.bkg.biz.operation.IFreightDemandBiz;
import cn.uce.suc.bkg.biz.operation.IFreightOrderBiz;
import cn.uce.suc.bkg.entity.operation.FreightDemand;
import cn.uce.suc.bkg.exception.BkgModuleException;
import cn.uce.suc.bkg.service.operation.FreightDemandService;
import cn.uce.suc.bkg.vo.operation.FreightDemandVo;
import cn.uce.suc.bkg.vo.operation.FreightOrderVo;
import cn.uce.suc.common.biz.INoticeDetailBiz;
import cn.uce.suc.common.biz.INoticeRuleBiz;
import cn.uce.suc.common.constants.BkgConstants;
import cn.uce.suc.common.entity.Mobileuser;
import cn.uce.suc.common.ids.IIdsWorker;
import cn.uce.suc.common.ids.IdsConstants.IdsPrefix;
import cn.uce.suc.common.ids.IdsConstants.NamesPrefix;
import cn.uce.suc.common.service.MobileuserService;
import cn.uce.suc.common.service.NoticeDetailService;
import cn.uce.suc.common.service.NoticeRuleService;
import cn.uce.suc.common.vo.NoticeDetailVo;
import cn.uce.web.common.i18n.Resources;
import cn.uce.web.common.util.ObjectConvertUtil;

/**
 * @Description: 货运需求表BIZ实现类
 * @author yanglei
 * @date 2017年10月19日 下午12:12:42
 */
@Service("freightDemandBiz")
@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
public class FreightDemandBiz implements IFreightDemandBiz {
	
	/**
	 * 注入货运需求表Service
	 */
	@Resource
	private FreightDemandService freightDemandService;
	/**
	 * 注入货运需求订单Biz
	 */
	@Resource
	private IFreightOrderBiz freightOrderBiz;
	/**
	 * 注入 生成编码的worker
	 */
	@Resource
	private IIdsWorker  redisIdsWorker;
	
	/**
	 * 注入消息规则service
	 */
	@Resource
	private NoticeRuleService noticeRuleService;
	/**
	 * 注入消息明细service
	 */
	@Resource
	private NoticeDetailService noticeDetailService;
	/**
	 * 注入消息规则biz
	 */
	@Resource
	private INoticeRuleBiz noticeRuleBiz;
	/**
	 * 注入消息明细biz
	 */
	@Resource
	private INoticeDetailBiz noticeDetailBiz;
	/**
	 * app用户biz
	 */
	@Resource
	private MobileuserService mobileUserService;
	
	/**
	 * @Description: 新增货运需求表
	 * @param freightDemand
	 * @return 受影响行数
	 * @author UCE-lixueyuan
	 * @date 2017年10月18日 上午09:57:44
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public int addFreightDemand(FreightDemandVo freightDemandvo) {
		if(BkgConstants.DEMAND_TYPE_LONG.equals(freightDemandvo.getDemandType())){//长期需求
			/**获得需求编码*/
			String demandCode =redisIdsWorker.nextId(IdsPrefix.CQ);
			String name=freightDemandvo.getDemandSite();
			String demandName=redisIdsWorker.nextName(name, NamesPrefix.CQNA);
			freightDemandvo.setDemandCode(demandCode);
			freightDemandvo.setDemandName(demandName);
		}else{//临时需求
			/**获得需求编码*/
			String demandCode =redisIdsWorker.nextId(IdsPrefix.LS);
			String name=freightDemandvo.getDemandSite();
			String demandName=redisIdsWorker.nextName(name, NamesPrefix.LSNA);
			freightDemandvo.setDemandCode(demandCode);
			freightDemandvo.setDemandName(demandName);
		}
		FreightDemand freightDemand = ObjectConvertUtil.convertObject(freightDemandvo, FreightDemand.class);
		int res =freightDemandService.addFreightDemand(freightDemand); 
		freightDemandvo.setId(freightDemand.getId());
		return res;
	}
	/**
	 * @Description:  网点端 提交货运需求事需要向 PC端发送消息提醒待报价
	 * @param freightDemand
	 * @return 受影响行数
	 * @author UCE-lixueyuan
	 * @date 2017年10月18日 上午09:57:44
	 */
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	@Override
	public int appAddFreightDemand(FreightDemandVo freightDemandvo) {
		int addFreightDemand = addFreightDemand(freightDemandvo);
		if(addFreightDemand>0){
			generateMessageToDispatch(BkgConstants.RULE_CODE_SUBMIT_FREIGHT_TO_DISPATCH,freightDemandvo);
		}else{
			throw new BkgModuleException(Resources.getMessage("error.bkg.biz.FreightDemandBiz.dotSave.fail"));
		}
		return addFreightDemand;
	}
	
	/**
	 * 
	 * @Description: 网点端上报货量时,  向平台发送消息
	 * @param dirvingPlanDetail
	 * @author lixueyuan
	 * @date 2017年11月16日 下午8:15:51
	 */
	private void generateMessageToDispatch(String ruleCode, FreightDemandVo freightDemandvo) {
		NoticeDetailVo noticeDetailVoDispatch=new NoticeDetailVo();
		noticeDetailVoDispatch.setBusinessId(Long.parseLong(freightDemandvo.getId().toString()));
		noticeDetailVoDispatch.setBusinessType("");
		noticeDetailVoDispatch.setNoticeRuleCode(ruleCode);
		noticeDetailBiz.generateMessage(freightDemandvo, noticeDetailVoDispatch);
	}
	/**
	 * @Description: 修改货运需求表
	 * @param freightDemand 货运需求表
	 * @return 受影响行数
	 * @author UCE-lixueyuan
	 * @date 2017年10月18日 上午09:57:44
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public int updateFreightDemand(FreightDemandVo freightDemandvo) {
		FreightDemand freightDemand = ObjectConvertUtil.convertObject(freightDemandvo, FreightDemand.class);
		int updateById = freightDemandService.updateById(freightDemand);
		freightDemandvo.setId(freightDemand.getId());
		return updateById;
	}
	/**
	 * @Description: 网点端 取消与确认 货运需求表
	 * @param freightDemand 货运需求表
	 * @return 受影响行数
	 * @author UCE-lixueyuan
	 * @date 2017年10月18日 上午09:57:44
	 */
	@Override	
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public int appUpdateFreightDemand(FreightDemandVo freightDemandvo) {
		int res = updateFreightDemand(freightDemandvo);
		if(res>0){
			FreightDemand findById = freightDemandService.findById(freightDemandvo.getId());
			freightDemandvo = ObjectConvertUtil.convertObject(findById, FreightDemandVo.class);
			if(BkgConstants.DEMAND_STATUS_SITE_COMFIRM .equals(freightDemandvo.getDemandStatus())){
				generateMessageToDispatch(BkgConstants.RULE_CODE_CONFIRM_FREIGHT_TO_DISPATCH,freightDemandvo);
			}
			if(BkgConstants.DEMAND_STATUS_SITE_CANCALE.equals(freightDemandvo.getDemandStatus())){
				generateMessageToDispatch(BkgConstants.RULE_CODE_CANCEL_FREIGHT_TO_DISPATCH,freightDemandvo);
			}
		}else{
			if(BkgConstants.DEMAND_STATUS_SITE_COMFIRM .equals(freightDemandvo.getDemandStatus())){
				throw new BkgModuleException(Resources.getMessage("error.bkg.biz.FreightDemandBiz.dotConfirm.fail"));
			}
			if(BkgConstants.DEMAND_STATUS_SITE_CANCALE .equals(freightDemandvo.getDemandStatus())){
				throw new BkgModuleException(Resources.getMessage("error.bkg.biz.FreightDemandBiz.dotCancel.fail"));
			}
		}
		return res;
	}
	
	/**
	 * @Description: 分页查询货运需求表
	 * @param freightDemandVo 货运需求表
	 * @param page 分页参数
	 * @return 货运需求表
	 * @author yanglei
	 * @date 2017年10月19日 下午12:12:42
	 */
	public Pagination<FreightDemandVo> findByPagination(FreightDemandVo freightDemandVo, Page page) {
		Pagination<FreightDemandVo> pagination = freightDemandService.findByPagination(freightDemandVo, page);
		return pagination;
	}

	/**
	 * @Description: 查询货运需求表
	 * @param freightDemandVo 货运需求表
	 * @param page 分页参数
	 * @return 货运需求表
	 * @author yanglei
	 * @date 2017年10月19日 下午12:12:42
	 */
	@Override
	public List<FreightDemandVo> findByCondition(FreightDemandVo freightDemandVo) {
		List<FreightDemandVo> list = freightDemandService.findByCondition(freightDemandVo);
		return list;
	}

	/**
	 * @Description: 批量更新需求状态
	 * @param freightDemandVo 货运需求表
	 * @param 
	 * @return 
	 * @author lixueyuan
	 * @date 2017年10月25日 下午12:12:42
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public String updateBatchDemandStatus(List<FreightDemandVo> freightDemandVos) {
		String demandStatus = "";
		for (FreightDemandVo freightDemandVo:freightDemandVos) {
			if(demandStatus == ""){
				demandStatus=freightDemandVo.getDemandStatus();
			}
			int res =updateFreightDemand(freightDemandVo);
			if(res==0){
				throw new BkgModuleException(Resources.getMessage("common.update.not.latest"));
			}
			/*锁定需求后 新增订单*/
			if(BkgConstants.DEMAND_STATUS_LOCKED.equals(freightDemandVo.getDemandStatus())){
				FreightOrderVo freightOrder = convertDemandToOrder(freightDemandVo);
				Long addFreightOrder = freightOrderBiz.addFreightOrder(freightOrder );
				if(addFreightOrder==0){
					throw new BkgModuleException(Resources.getMessage("error.bkg.biz.FreightDemandBiz.addOrderEXP"));
				}
			}
		}
		if(demandStatus.equals(BkgConstants.DEMAND_STATUS_CHECKED)){
			return Resources.getMessage("bkg.biz.FreightDemandBiz.checkQuotation.success");
		}else if(demandStatus.equals(BkgConstants.DEMAND_STATUS_LOCKED)){
			return Resources.getMessage("bkg.biz.FreightDemandBiz.lockDemand.success");
		}else if(demandStatus.equals(BkgConstants.DEMAND_STATUS_END)){
			return Resources.getMessage("bkg.biz.FreightDemandBiz.endDemand.success");
		}else{
			return "";
		}
	}
	/**
	 * 
	 * @Description: freightDemandVo 转换成 freightOrder
	 * @param freightDemandVo
	 * @return
	 * @author lixueyuan
	 * @date 2017年10月25日 下午8:08:17
	 */
	private FreightOrderVo convertDemandToOrder(FreightDemandVo fd){
		FreightOrderVo fo = new FreightOrderVo();
		fo.setDemandCombineCode(fd.getDemandCombineCode());
		fo.setDemandCombineName(fd.getDemandCombineName());
		fo.setOrderStatus(BkgConstants.ORDER_STATUS_PERFORM);
		fo.setDemandSite(fd.getDemandSite());
		fo.setDemandSiteCode(fd.getDemandSiteCode());
		fo.setBusinessMode(fd.getBusinessMode());
		fo.setIsCarpool(fd.getIsCarpool());
		fo.setDemandType(fd.getDemandType());
		fo.setExecuteStartTime(fd.getExecuteBeginTime());
		fo.setExecuteEndTime(fd.getExecuteEndTime());
		fo.setBeginStation(fd.getBeginStation());
		fo.setOrderStartTime(fd.getDemandBeginTime());
		fo.setOrderEndTime(fd.getDemandEndTime());
		fo.setBeginStationCode(fd.getBeginStationCode());
		fo.setEndStationCode(fd.getEndStationCode());
		fo.setArrivalTime(fd.getArrivalTime());
		fo.setDepartureTime(fd.getDepartureTime());
		fo.setLayTime(fd.getLayTime());
		fo.setCarpoolSitesCode(fd.getCarpoolSitesCodes());
		fo.setCarpoolSitesName(fd.getCarpoolSites());
		fo.setLineGroupCode(fd.getLineGroupCode());
		fo.setPrice(fd.getPrice());
		fo.setAdjustPrice(fd.getAdjustPrice());
		fo.setOrderStartTime(fd.getDemandBeginTime());
		fo.setOrderEndTime(fd.getDemandEndTime());
		fo.setMondayVolume(fd.getMondayVolume());
		fo.setMondayWeight(fd.getMondayWeight());
		fo.setTuesdayVolume(fd.getTuesdayVolume());
		fo.setWednesdayVolume(fd.getWednesdayVolume());
		fo.setWednesdayWeight(fd.getWednesdayWeight());
		fo.setThursdayVolume(fd.getThursdayVolume());
		fo.setThursdayWeight(fd.getThursdayWeight());
		fo.setFridayVolume(fd.getFridayVolume());
		fo.setFridayWeight(fd.getFridayWeight());
		fo.setSaturdayVolume(fd.getSaturdayVolume());
		fo.setSaturdayWeight(fd.getSaturdayWeight());
		fo.setSundayVolume(fd.getSundayVolume());
		fo.setSundayWeight(fd.getSundayWeight());
		fo.setDayVolume(fd.getDayVolume());
		fo.setDayWeight(fd.getDayWeight());
		fo.setCreateEmp(fd.getUpdateEmp());
		fo.setCreateOrg(fd.getCreateOrg());
		fo.setCreateTime(fd.getCreateTime());
		return fo;
	}
	
	/**
	 * 
	 * @Description: 发送报价 网点审核
	 * @param freightDemandVos
	 * @param demandStatus
	 * @return
	 * @author lixueyuan
	 * @date 2017年11月2日 上午11:01:05
	 */
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	@Override
	public String sendQuotation(List<FreightDemandVo> freightDemandVos,List<String> siteCodes) {
		List<Mobileuser> mobileusers = mobileUserService.findPhoneByBaseOrgCode(siteCodes);
		Map<String, String> mobiles = new HashMap<>();
		for(Mobileuser u: mobileusers){
			mobiles.put(u.getBaseOrgCode(), u.getMobilephone());
		}
		/**循环货运需求 添加消息明细*/
		for(FreightDemandVo vo:freightDemandVos){
			int noticeDetailRes = addSendQutationNoticeDetails(vo,mobiles);
			/**新增 发送网点报价 消息明细*/
			if(noticeDetailRes==0){
				throw new BkgModuleException(Resources.getMessage("error.bkg.biz.FreightDemandBiz.addSiteCheckNoticeDetailEXP"));
			}
			/**更新货运需求状态 为已报价*/
			vo.setDemandStatus(BkgConstants.DEMAND_STATUS_QUOTE_YES);
			int demandRes = updateFreightDemand(vo);
			if(demandRes==0){
				throw new BkgModuleException(Resources.getMessage("error.bkg.biz.FreightDemandBiz.sendQuotation.updateDemandStatus.fail"));
			}
		}
		
		return Resources.getMessage("bkg.biz.FreightDemandBiz.sendQuotation.success");
	}
	/**
	 * 
	 * @Description: 封装 发送报价 给网点的信息
	 * @param vo
	 * @return
	 * @author lixueyuan
	 * @date 2017年11月3日 上午9:41:13
	 */
	private int addSendQutationNoticeDetails(FreightDemandVo vo,Map<String, String> mobiles ) {
		NoticeDetailVo noticeDetailVo=new NoticeDetailVo();
		noticeDetailVo.setNoticeRuleCode(BkgConstants.RULE_CODE_SEND_FREIGHT_QUOTE_TO_SITE);
		noticeDetailVo.setBusinessId(vo.getId());
		noticeDetailVo.setBusinessType(BkgConstants.APP_FREIGHT_DEMAND_DETAIL);
		noticeDetailVo.setCreateEmp(vo.getUpdateEmp());
		noticeDetailVo.setCreateOrg(vo.getUpdateOrg());
		noticeDetailVo.setCreateTime(vo.getUpdateTime());
		if(null != mobiles &&null !=mobiles.get(vo.getDemandSiteCode())&&!mobiles.get(vo.getDemandSiteCode()).isEmpty()){
			noticeDetailVo.setUserPhone(mobiles.get(vo.getDemandSiteCode()));
		}else{
			throw new BkgModuleException(Resources.getMessage("error.bkg.biz.FreightDemandBiz.addSiteCheckNoticeDetail.noDemandSitePhone"));
		}
		noticeDetailVo.setDisplayWays(BkgConstants.DISPLAY_WAYS_HOME+","+BkgConstants.DISPLAY_WAYS_NOTICE+","+BkgConstants.DISPLAY_WAYS_NEWS);
		int noticeDetailRes =noticeDetailBiz.generateMessage(vo, noticeDetailVo);
		return noticeDetailRes;
	}
	/**
	 * 
	 * @Description: 根据组合需求查询需求 
	 * @param freightDemandVo
	 * @return
	 * @author laizhendong
	 * @date 2017年10月26日 下午11:50:58
	 */
	public List<FreightDemandVo> findByCombine(FreightDemandVo freightDemandVo){
		return freightDemandService.findByCombine(freightDemandVo);
	}
	
/**
	 * 
	 * @Description: 根据需求编号更新执行时间
	 * @param freightDemandVo
	 * @return
	 * @author laizhendong
	 * @date 2017年11月16日 下午7:30:43
	 */
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public int updateByDemandCode(List<FreightDemandVo> freightDemandVos){
		return freightDemandService.updateByDemandCode(freightDemandVos);
	}

}