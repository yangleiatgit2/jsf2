package cn.uce.suc.bkg.biz.operation;

import java.util.List;

import cn.uce.base.page.Page;
import cn.uce.base.page.Pagination;
import cn.uce.suc.bkg.entity.operation.IaConf;
import cn.uce.suc.bkg.vo.ia.FreigtCombineVo;
import cn.uce.suc.bkg.vo.operation.FreightDemandCombineVo;
import cn.uce.suc.bkg.vo.operation.FreightOrderCombineVo;
import cn.uce.suc.bkg.vo.operation.IaConfVo;
import cn.uce.suc.bkg.vo.operation.LineGroupVo;

/**
 * @Description: 智能算法参数维护BIZ接口类
 * @author laizhendong
 * @date 2017年10月19日 下午08:41:03
 */
public interface IIaConfBiz {
	
	/**
	 * @Description: 新增智能算法参数维护
	 * @param iaConf
	 * @return 受影响行数
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	public int addIaConf(IaConfVo iaConfvo);
	
	/**
	 * @Description: 修改智能算法参数维护
	 * @param iaConf 智能算法参数维护
	 * @return 受影响行数
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	public int updateIaConf(IaConfVo iaConf);
	
	/**
	 * @Description: 删除智能算法参数维护
	 * @param id 主键
	 * @return 受影响行数
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	public int deleteIaConf(Long id);
	
	/**
	 * @Description: 根据ID查询智能算法参数维护
	 * @param id 主键
	 * @return 智能算法参数维护
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	public IaConf findById(Long id);
	
	/**
	 * @Description: 分页查询智能算法参数维护
	 * @param iaConfVo 智能算法参数维护
	 * @param page 分页参数
	 * @return 智能算法参数维护
	 * @author laizhendong
	 * @date 2017年10月19日 下午08:41:03
	 */
	public Pagination<IaConfVo> findByPagination(IaConfVo iaConfVo, Page page);
	
	/**
	 * 
	 * @Description: 根据条件查询参数
	 * @param iaConfVo
	 * @return
	 * @author laizhendong
	 * @date 2017年10月20日 上午11:31:33
	 */
	public List<IaConfVo> findByCondition(IaConfVo iaConfVo);
	
	 /** 
	 * @Description: 异步执行临时需求
	 * @param demandCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午8:31:08
	 */
	public void asyncRunDemandCombine(FreightDemandCombineVo demandCombineVo);
	
	
	 /** 
	 * @Description: 异步执行长期需求
	 * @param demandCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午8:31:08
	 */
	public void asyncRunDemandCombine(FreightDemandCombineVo demandCombineVo,FreightDemandCombineVo brotherDemandCombineVo);
	
	/**
	 * 
	 * @Description: 异步执行临时订单组合
	 * @param orderCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午10:02:59
	 */
	public void asyncRunOrderCombine(FreightOrderCombineVo orderCombineVo);
	
	/**
	 * 
	 * @Description: 异步执行长期订单组合
	 * @param orderCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午10:02:59
	 */
	public void asyncRunOrderCombine(FreightOrderCombineVo orderCombineVo,FreightOrderCombineVo brotherOrderCombineVo);
	
	/**
	 * 
	 * @Description: 自动根据长期需求组合执行算法计算班次及价格
	 * @author laizhendong
	 * @date 2017年11月2日 下午7:12:53
	 */
	public void autoInvokeIaByLongTermDemandCombine();
	
	/**
	 * 
	 * @Description: 自动根据长期需求组合执行算法计算班次及价格
	 * @author laizhendong
	 * @date 2017年11月2日 下午7:12:53 
	 */
	public void autoInvokeIaByShortTermDemandCombine();
	
	/**
	 * 
	 * @Description: 自动根据长期订单组合执行算法计算班次及价格
	 * @author laizhendong
	 * @date 2017年11月2日 下午7:12:53
	 */
	public void autoInvokeIaByLongTermOrderCombine();
	
	/**
	 * 
	 * @Description: 自动根据长期订单组合执行算法计算班次及价格
	 * @author laizhendong
	 * @date 2017年11月2日 下午7:12:53 
	 */
	public void autoInvokeIaByShortTermOrderCombine();
	
	/**
	 * 
	 * @Description: 订单组合调用算法生成班次
	 * @param orderCombineVo
	 * @author laizhendong
	 * @date 2017年12月4日 下午1:12:16
	 */
	public void runOrderCombineCatchException(FreightOrderCombineVo orderCombineVo);
	/**
	 * 
	 * @Description: 临时需求调用算法异常处理 
	 * @param freightDemandCombineVo
	 * @author laizhendong
	 * @date 2017年11月30日 下午2:56:09
	 */
	public void runDemandCombineCatchException(FreightDemandCombineVo demandCombineVo);
	
	
	/**
	 * 
	 * @Description: 执行临时需求祝贺
	 * @param freightDemandCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年11月7日 下午5:16:03
	 */
	public int runDemandCombine(FreightDemandCombineVo demandCombineVo);
	
	/**
	 * 
	 * @Description: 运行订单组合生成班次
	 * @param orderCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年12月5日 上午10:25:54
	 */
	public int runOrderCombine(FreightOrderCombineVo orderCombineVo);

	/**
	 * 
	 * @Description: 事务保存班次、班次详情、班次关系、及更新需求或订单的状态和时间 
	 * @param lineGroupVos
	 * @param freigtCombineVo
	 * @return
	 * @author laizhendong
	 * @date 2017年12月21日 下午5:01:24
	 */
	public int saveAndUpdateByLineGroup(List<LineGroupVo> lineGroupVos, FreigtCombineVo freigtCombineVo);
	
}