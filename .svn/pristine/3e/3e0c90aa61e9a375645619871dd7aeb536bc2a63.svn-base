package cn.uce.suc.bkg.biz.impl.infomon;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import cn.uce.suc.bkg.biz.impl.operation.LineGroupBiz;
import cn.uce.suc.bkg.biz.infomon.IVisibleTransportBiz;
import cn.uce.suc.bkg.cache.DirierPlanCache;
import cn.uce.suc.bkg.entity.datamain.CarManage;
import cn.uce.suc.bkg.entity.datamain.Dirver;
import cn.uce.suc.bkg.entity.datamain.ExceptionManager;
import cn.uce.suc.bkg.entity.operation.CarTrace;
import cn.uce.suc.bkg.entity.operation.DeparPlanForApp;
import cn.uce.suc.bkg.entity.operation.DirvingPlan;
import cn.uce.suc.bkg.entity.operation.DirvingPlanDetail;
import cn.uce.suc.bkg.entity.operation.DirvingPlanTrace;
import cn.uce.suc.bkg.entity.operation.LineGroup;
import cn.uce.suc.bkg.entity.operation.LineGroupDetail;
import cn.uce.suc.bkg.service.datamain.CarManageService;
import cn.uce.suc.bkg.service.datamain.DirverService;
import cn.uce.suc.bkg.service.datamain.ExceptionManagerService;
import cn.uce.suc.bkg.service.infomon.VisibleTransportService;
import cn.uce.suc.bkg.service.operation.CarTraceService;
import cn.uce.suc.bkg.service.operation.DirvingPlanDetailService;
import cn.uce.suc.bkg.service.operation.DirvingPlanService;
import cn.uce.suc.bkg.service.operation.DirvingPlanTraceService;
import cn.uce.suc.bkg.service.operation.LineGroupDetailService;
import cn.uce.suc.bkg.service.operation.LineGroupService;
import cn.uce.suc.bkg.vo.datamain.CarManageVo;
import cn.uce.suc.bkg.vo.operation.CarTraceVo;
import cn.uce.suc.bkg.vo.operation.DirvingPlanDetailVo;
import cn.uce.suc.bkg.vo.operation.DirvingPlanVo;
import cn.uce.suc.bkg.vo.operation.LineGroupVo;
import cn.uce.suc.common.biz.imp.NoticeDetailBiz;
import cn.uce.suc.common.biz.imp.OmgCmsOrgBiz;
import cn.uce.suc.common.cache.CarPositioningCache;
import cn.uce.suc.common.cache.OrgExtendCache;
import cn.uce.suc.common.constants.BkgConstants;
import cn.uce.suc.common.entity.Mobileuser;
import cn.uce.suc.common.entity.OmgCmsOrg;
import cn.uce.suc.common.ids.IIdsWorker;
import cn.uce.suc.common.ids.IdsConstants.IdsPrefix;
import cn.uce.suc.common.service.MobileuserService;
import cn.uce.suc.common.service.TruckCostManagementService;
import cn.uce.suc.common.util.BaiduDistanceUtil;
import cn.uce.suc.common.vo.CarPositioningVo;
import cn.uce.suc.common.vo.MobileuserVo;
import cn.uce.suc.common.vo.NoticeDetailVo;
import cn.uce.suc.common.vo.OmgCmsOrgVo;
import cn.uce.suc.common.vo.OrgExtendVo;
import cn.uce.suc.common.vo.SucCurrentUser;
import cn.uce.suc.common.vo.TruckCostManagementVo;
import cn.uce.utils.StringUtil;
import cn.uce.web.common.i18n.Resources;
import cn.uce.web.common.util.ObjectConvertUtil;

import com.alibaba.fastjson.JSONArray;
/**
 * 
 * @Description:  (这里用一句话描述这个类的作用) 
 * @author liwei
 * @date 2017年11月13日 下午7:53:43
 */
@Service("visibleTransportBiz")
@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)
public class VisibleTransportBiz implements IVisibleTransportBiz{
	
	@Resource
	public VisibleTransportService visibleTransportService;
	@Resource
	public DirvingPlanService dirvingPlanService;
	@Resource
	public DirvingPlanDetailService dirvingPlanDetailService;
	@Resource
    private IIdsWorker  redisIdsWorker;
	@Resource
	private CarTraceService carTraceService;
	@Resource
	private DirverService dirverService;
	@Resource
	private ExceptionManagerService exceptionService;
	@Resource
	private CarManageService carManageService;
	@Resource
	private TruckCostManagementService truckCostManagementService;
	/**
	 * 注入班次管理Service
	 */
	@Resource
	private LineGroupService lineGroupService;
	
	/**
	 * 注入班次详情lineGroupDetailService
	 */
	@Resource
	private LineGroupDetailService lineGroupDetailService;
	/**
	 * 消息详情noticeDetailBiz
	 */
	@Resource
	private NoticeDetailBiz noticeDetailBiz;
	
	@Resource
	private LineGroupBiz lineGroupBiz;
	
	/**
	 * 组织omgCmsOrgBiz
	 */
	@Resource
	private OmgCmsOrgBiz omgCmsOrgBiz;
	
	/**
	 * 组织机构扩展
	 */
	@Resource(name = "orgExtendCache")
	OrgExtendCache orgExtendCache;
	/**
	 * 车辆当前位置
	 */
	@Resource(name = "carPositioningCache")
	CarPositioningCache carPositioningCache;
	/**
	 * 发车计划缓存
	 */
	@Resource(name = "dirierPlanCache")
	DirierPlanCache dirierPlanCache;
	/**
	 * 发车计划轨迹
	 */
	@Resource
	private DirvingPlanTraceService dirvingPlanTraceService;
	/**
	 * 移动端用户
	 */
	@Resource
	private MobileuserService mobileuserService;
	/**
	 * 日志
	 */
	protected static Logger log = LoggerFactory.getLogger(VisibleTransportBiz.class);
	private static String[] resportStatus={BkgConstants.DRIVER_STATUS_LOAD_WAIT,BkgConstants.DRIVER_STATUS_LOAD_TIMEOVER,BkgConstants.DRIVER_STATUS_LOAD_CONFIRM
		+BkgConstants.DRIVER_STATUS_LOADING_FINISH,BkgConstants.DRIVER_STATUS_NEXT_STATION,BkgConstants.DRIVER_STATUS_CARGO_PENDING,BkgConstants.DRIVER_STATUS_PENDING_TIMEOVER
		+BkgConstants.DRIVER_STATUS_PENDING_CONFIRM,BkgConstants.DRIVER_STATUS_UNLOADING_COMPLETED,BkgConstants.DRIVER_STATUS_COMPLETED,BkgConstants.DRIVER_STATUS_SEND_ERROR
		+BkgConstants.DRIVER_STATUS_TRANSPORT_ERROR,BkgConstants.DRIVER_STATUS_END};
	/**
	 * 
	 * @Description:  (查询发车计划) 
	 * @param dirvingPlanVo
	 * @return
	 * @author liuhai
	 * @date 2017年10月26日 下午5:53:42
	 */
	@Override
	public List<DirvingPlanVo> queryDirvingPlan(DirvingPlanVo dirvingPlanVo){
		return visibleTransportService.queryDirvingPlan(dirvingPlanVo);
	}

	/**
	 * 
	 * @Description:  (插入发车计划车辆运输轨迹) 
	 * @param visibleTransportVo
	 * @return
	 * @author liuhai
	 * @date 2017年10月26日 下午4:58:02
	 */
	@Override
	@Transactional(readOnly=false,propagation=Propagation.REQUIRED)
	public int updateTransportTrail(DirvingPlanVo dirvingPlanVo){
		CarTrace carTrace=new CarTrace();
		carTrace.setLng(dirvingPlanVo.getLongitude());
		carTrace.setLat(dirvingPlanVo.getLatitude());
		carTrace.setDrivingPlanCode(dirvingPlanVo.getDrivingPlanCode());
		carTrace.setPlateNumbers(dirvingPlanVo.getPlateNumber());
		CarTraceVo cvo=carTraceService.queryCarTraceByVo(carTrace);
		if(cvo==null){
			carTraceService.addCarTrace(carTrace);
		}else{
			//更新车辆实时经纬度
			visibleTransportService.updateCarTrace(carTrace);
		}
		//更新发车计划车辆轨迹（经纬度集合）
		return visibleTransportService.updateTransportTrail(dirvingPlanVo);
	}
	/**
	 * 
	 * @Description:  (通过可视化运输条件查询车辆信息) 
	 * @param visibleTransportInfoVo
	 * @return
	 * @author liuhai
	 * @date 2017年10月30日 下午8:59:19
	 */
	@Override
	public List<CarManage> searchCarInfo(CarManageVo carManageVo){
		return visibleTransportService.searchCarInfo(carManageVo);
	}
	/**
	 * 
	 * @Description:  (查询分拨中心信息) 
	 * @param carManageVo
	 * @return
	 * @author liuhai
	 * @date 2017年10月31日 下午12:45:33
	 */
	@Override
	public List<OrgExtendVo> searchGroupCenterInfo(CarManageVo carManageVo){
		return visibleTransportService.searchGroupCenterInfo(carManageVo);
	}
	/**
	 * 
	 * @Description:  (查询异常信息) 
	 * @param dirvingPlanVo
	 * @return
	 * @author liuhai
	 * @date 2017年10月31日 下午5:17:19
	 */
	@Override
	public List<ExceptionManager> queryExceptionInfo(DirvingPlanVo dirvingPlanVo){
		return visibleTransportService.queryExceptionInfo(dirvingPlanVo);
	}
	/**
	 * 
	 * @Description:  (查询车辆信息且带有经纬度) 
	 * @param carManageVo
	 * @return
	 * @author liuhai
	 * @date 2017年11月3日 下午3:40:32
	 */
	@Override
	public List<CarManage> queryCarInfo(CarManageVo carManageVo){
		return visibleTransportService.queryCarInfo(carManageVo);
	}
	/**
	 * 
	 * @Description:  (查询所有异常车辆) 
	 * @param omgCmsOrg
	 * @return
	 * @author liuhai
	 * @date 2017年11月3日 下午6:47:42
	 */
	public List<CarManage> queryExceptionCar(OmgCmsOrg omgCmsOrg){
		return visibleTransportService.queryExceptionCar(omgCmsOrg);
	}
	/**
	 * 
	 * @Description:  (根据发车计划单号查询是否有异常) 
	 * @param dirvingPlanVo
	 * @return
	 * @author liuhai
	 * @date 2017年11月5日 下午1:58:20
	 */
	@Override
	public List<ExceptionManager> queryExceptionByDrivingPlanCode(DirvingPlanVo dirvingPlanVo){
		return visibleTransportService.queryExceptionByDrivingPlanCode(dirvingPlanVo);
	}
	/**
	 * 
	 * @Description:  (根据发车计划查询发车计划详情) 
	 * @param dirvingPlanVo
	 * @return
	 * @author liuhai
	 * @date 2017年11月6日 下午7:26:36
	 */
	@Override
	public List<DirvingPlanDetail> queryDirvingPlanDetail(DirvingPlanVo dirvingPlanVo){
		return visibleTransportService.queryDirvingPlanDetail(dirvingPlanVo);
	}
	
	/**
	 * 
	 * @Description:  (重绑发车计划(生成新的发车计划，班次不变,重绑车)) 
	 * @return
	 * @author liuhai
	 * @date 2017年11月7日 下午4:29:32
	 */
	@Transactional(readOnly=false,propagation=Propagation.REQUIRED)
	public int updateDeparturePlan(DirvingPlan dirvingPlan,String dpCode,SucCurrentUser userInfo){
		CarManageVo carManageVo=new CarManageVo();
		carManageVo.setCarNumber(dirvingPlan.getPlateNumber());//传过来的是车辆编码
		//通过车辆编码查询车辆信息
		List<CarManageVo> cmList=carManageService.findByVo(carManageVo);
		String plateNumber="";
		String carType="";
		if(CollectionUtils.isNotEmpty(cmList)){
			plateNumber=cmList.get(0).getPlateNumbers();
			carType=cmList.get(0).getCarType();
		}
		TruckCostManagementVo truckCostManagementVo=new TruckCostManagementVo();
		
		DirvingPlanVo oldDp=new DirvingPlanVo();
		oldDp.setDrivingPlanCode(dirvingPlan.getDrivingPlanCode());
		//查询发车计划
		DirvingPlan dpvo=dirvingPlanService.findByrivingPlanCode(dirvingPlan.getDrivingPlanCode());
		if(dpvo!=null){
			//判断进出港
			if("1".equals(dpvo.getBusinessMode())){
				truckCostManagementVo.setBelongSiteCode(dpvo.getStartOrgCode());	
			}else if("2".equals(dpvo.getBusinessMode())){
				truckCostManagementVo.setBelongSiteCode(dpvo.getEndOrgCode());	
			}
			truckCostManagementVo.setTruckType(dpvo.getDemandType());
			truckCostManagementVo.setTruckConcrete(carType);
			List<TruckCostManagementVo> tmList=truckCostManagementService.findByCondition(truckCostManagementVo);
			double value= 0L;
			if(CollectionUtils.isNotEmpty(tmList)){
				value=tmList.get(0).getTruckVolume()-tmList.get(0).getBufferVolume();
			}
			
			//查询司机信息
			Dirver dirver = dirverService.findById(Long.parseLong(dirvingPlan.getDriverPhone()));
			if(dirver!=null){
				dpvo.setDriverPhone(dirver.getMobilePhone());
				dpvo.setDirverName(dirver.getDriverName());
			}
			
			//新增发车计划主信息
			dpvo.setDrivingPlanCode(dpCode);
			dpvo.setDrivingPlanName(dpCode);
			dpvo.setPlateNumber(plateNumber);
			dpvo.setCarCode(dirvingPlan.getPlateNumber());
			//dpvo.setStatus(BkgConstants.PLAN_CODE_GENERATED);
			dpvo.setCreateTime(new Date());
			dpvo.setCreateEmp(userInfo.getEmpName());
			dpvo.setVersion(0);
			dpvo.setCreateOrg(userInfo.getCmsOrgName());
			dpvo.setUpdateTime(new Date());
			dpvo.setUpdateEmp(userInfo.getEmpName());
			dpvo.setUpdateOrg(userInfo.getCmsOrgName());
			dpvo.setLoadingRate(dpvo.getLineGroupTotalVolume()/value);//重新计算满载率
			dpvo.setAbnormalState("");//把是否有异常置为否
			dpvo.setId(null);
			dpvo.setStatus(BkgConstants.PLAN_CODE_UNCONFIRMED);//把 新的发车计划状态设置为司机未确认
			//增加发车计划主信息
			dirvingPlanService.addDirvingPlan(dpvo);
			//给司机发送消息
			if(StringUtils.isNotBlank(dirvingPlan.getDriverPhone())){
				//请尽快确认发车计划!
			    addSendDirvingPlanNotice(dpvo,dirvingPlan.getDriverPhone(),"DRIVER_STATUS_CONFIRM_WAIT");
			}
			//查询班次
			LineGroup lineGroup= lineGroupService.queryById(dpvo.getLineGroupCode());
			if(lineGroup !=null){
				lineGroup.setStatus(BkgConstants.LINE_GROUP_STATUS_PLAN_CREATE);//班次状态变为：已生成发车计划
				lineGroup.setLoadFactor(lineGroup.getTotalVolume()/(value<0?1:value));
				//更新班次
				lineGroupService.updateById(lineGroup);
			}
		}
		//查询发车计划详情
		List<DirvingPlanDetail> dpDetail=visibleTransportService.queryDirvingPlanDetail(oldDp);
		if(CollectionUtils.isNotEmpty(dpDetail)){
			for(DirvingPlanDetail detail : dpDetail){
				//新增发车计划子信息
				detail.setDrivingPlanCode(dpCode);
				detail.setCreateTime(new Date());
				detail.setCreateEmp(userInfo.getEmpName());
				detail.setCreateOrg(userInfo.getCmsOrgName());
				detail.setId(null);
				if(1==detail.getSort()){
					detail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_CONFIRM_WAIT);//把sort 等于1的司机状态改为 待确认
				}
				//增加发车计划详情
				dirvingPlanDetailService.addDirvingPlanDetail(detail);
			}
		}
		//老发车计划状态为”终止“;
		oldDp.setStatus(BkgConstants.PLAN_CODE_FINISH);
		//更新发车计划详情
		if(dpvo!=null&&StringUtils.isNotBlank(dpvo.getDriverPhone())){
			sendNotice("SYSTEN_DRIVERPLAN_CONFIRM_DPT",dpvo,dpvo.getId(),BkgConstants.APP_DRIVER_TASK);// 重绑发车计划待确认    发送给司机端
		}
		List<DirvingPlanDetail> pcDetail= dirvingPlanDetailService.findByDrivePlanCode(dpCode);
		if(dpvo!=null&&CollectionUtils.isNotEmpty(pcDetail)){
			for(int j=0;j<pcDetail.size();j++){
				String phoneNum=getSitePhine(pcDetail.get(j).getWayPointCode());
				dpvo.setDriverPhone(phoneNum);
				sendNotice("SYSTEN_DRIVERPLAN_CONFIRM_DOT",dpvo,pcDetail.get(j).getId(),BkgConstants.APP_DRIVING_PLAN_DETAIL);// 重绑发车计划待确认   发送给网点端 
			}
		}
		return visibleTransportService.updateTransportTrail(oldDp);
	}
	/**
	 * 
	 * @Description: TODO(查询发车计划车辆起途终点经纬度及司机信息) 
	 * @param dirvingPlanVo
	 * @return
	 * @author liuhai
	 * @date 2017年11月13日 下午3:21:25
	 */
	public List<DirvingPlanVo> queryDriverStatus(DirvingPlanVo dirvingPlanVo){
		return visibleTransportService.queryDriverStatus(dirvingPlanVo);
	}
	/**
	 * 
	 * @Description: TODO(查询途经点经纬度) 
	 * @param dirvingPlanVo
	 * @return
	 * @author liuhai
	 * @date 2017年11月13日 下午4:14:18
	 */
	public List<DirvingPlanDetail> queryThroughLngLat(DirvingPlanVo dirvingPlanVo){
		return visibleTransportService.queryThroughLngLat(dirvingPlanVo);
	}

	/**
	 * 
	 * @Description: 校验经纬度
	 * @author liwei
	 * @date 2017年11月13日 下午7:54:24
	 */
	@Override
	public HashMap<String,Boolean> validLatLng(DirvingPlanVo dirvingPlanVo) {
		HashMap<String,Boolean> map=new HashMap<String,Boolean>();
		if (null == dirvingPlanVo || StringUtil.isBlank(dirvingPlanVo.getDriverPhone())) {
			map.put("ex", true);
			return map ;
		}

		log.info("车辆当前位置：" +dirvingPlanVo.getLongitude()+ ","
				+ dirvingPlanVo.getLatitude());
		// 获取手机号
		 String driverPhone=dirvingPlanVo.getDriverPhone();
		// 发车计划编号
		 DirvingPlanVo dirvingPlanVo2 =dirierPlanCache.get(driverPhone);
		if(null == dirvingPlanVo2){
			log.info("当前不存在尚未执行的发车计划："+driverPhone);
			map.put("ex", true);
			return map ;
		}
		String planCode= dirvingPlanVo2.getDrivingPlanCode();
		dirvingPlanVo.setDrivingPlanCode(planCode);
		// 获取车辆最近一次记录
		CarPositioningVo carPositioningVo = carPositioningCache.get(planCode);
		// 车辆位置不存在--则需要写入
		if (null == carPositioningVo) {
			/** 处理方法 **/
			Boolean value=carNotExist(dirvingPlanVo);
			if(value){
				map.put("arrive", false);
			}else{
				map.put("ex", true);
			}
		} else {
			//车辆位置如果存在时处理方法
			HashMap<String,Boolean> mapValue=carExist(carPositioningVo, dirvingPlanVo);
			if(mapValue.get("arrive")==null?false:mapValue.get("arrive")){
				map.put("arrive", true);
			}else if(mapValue.get("nextBegin")==null?false:mapValue.get("nextBegin")){
				map.put("nextBegin", true);
			}else if(mapValue.get("ex")==null?false:mapValue.get("ex")){
				map.put("ex", true);
			}else{//包含hasArrive==true和hasArrive==false
				map.put("hasArrive", true);
			}
		}
		log.info("经纬度上传逻辑处理完毕，处理完毕" + planCode);
		return map ;
	}
	/**
	 * 
	 * @Description:  (这里用一句话描述这个方法的作用) 
	 * @param dirvingPlanVo
	 * @author liwei
	 * @date 2017年11月13日 下午8:38:30
	 */
	public HashMap<String,Boolean> carExist(CarPositioningVo carPositioningVo, DirvingPlanVo dirvingPlanVo) {
		HashMap<String,Boolean> map=new HashMap<String,Boolean>();
		if (null == carPositioningVo.getLat() || null == carPositioningVo.getLng()
				|| null == dirvingPlanVo.getLatitude() || null == dirvingPlanVo.getLongitude()) {
			log.info("车辆位置在缓存中  存在  时，车辆位置在缓存中站点经纬度可能为空或获取APP经纬度为空");
			map.put("ex", true);
			return map ;
		}
		//刷新缓存当前位置
		carPositioningVo.setCurrentlat(dirvingPlanVo.getLatitude());
		carPositioningVo.setCurrentlng(dirvingPlanVo.getLongitude());
		//重新设置缓存
		carPositioningCache.set(dirvingPlanVo.getDrivingPlanCode(), carPositioningVo);
		Double statLat = Double.parseDouble(carPositioningVo.getLat());
		Double statLng = Double.parseDouble(carPositioningVo.getLng());
		Double endLat = Double.parseDouble(dirvingPlanVo.getLatitude());
		Double endlng = Double.parseDouble(dirvingPlanVo.getLongitude());
		//通过站点经纬度和当前经纬度计算距离
		Double catualdistance = BaiduDistanceUtil.getDistance(statLat, statLng, endLat, endlng);
		// 获取到达下一站的电子围栏距离
		Double forcatDistance = carPositioningVo.getDistane();
		if (null == forcatDistance) {
			log.info("车辆位置在缓存中  存在  时，车辆位置在缓存中未获取到站点下一站的电子围栏距离");
			map.put("ex", true);
			return map ;
		}
		//如果计算距离<电子围栏半径
		if (catualdistance <= forcatDistance) {
			// 处理到达时间--如果
			if (carPositioningVo.isArriveFlag()) {
				map.put("hasArrive", true);
			} else {
				carPositioningVo.setArriveFlag(true);
				// 更新缓存
				carPositioningCache.set(carPositioningVo.getDriverPlanCode(), carPositioningVo);
				// 介入到达事件
				arriveProcess(carPositioningVo);
				log.info("发车计划号--"+carPositioningVo.getDriverPlanCode()+":已到达--"+carPositioningVo.getStationName());
				map.put("arrive", true);
			}
			return map ;
		} else {
			if (carPositioningVo.isArriveFlag()) {
				// 介入离开事件，触发下一站
				sendOut(carPositioningVo);
				log.info("发车计划号--"+carPositioningVo.getDriverPlanCode()+":准备去--"+carPositioningVo.getStationName());
				map.put("nextBegin", true);
			} else {
				map.put("hasArrive", false);
			}
			return map ;
		}
	}
	/**
	 * 
	 * @Description: 电子围栏到达--网点，司机  待装货、待卸货
	 * @author liwei
	 * @date 2017年11月13日 下午10:29:09
	 */
	private void arriveProcess(CarPositioningVo carPositioningVo) {
		/***
		 * 1,根据发车计划详情进行更新发车计划详情
		 */
		DirvingPlanDetail detail = new DirvingPlanDetail();
		NoticeDetailVo noticeDetailVoDriver = new NoticeDetailVo();
		NoticeDetailVo noticeDetailVoSite = new NoticeDetailVo();
		detail.setId(carPositioningVo.getPlanDetailId());
		if (null == carPositioningVo.getBussessModule()) {
			log.info("车辆位置在缓存中  存在  时，车辆位置在缓存中未获取到站点 业务模式");
			return;
		}
		String planSitePrompt = "";
		String planDriverPrompt = "";// --分拨需要跳转
		//如果当前位置为进港
		if (carPositioningVo.getBussessModule().equals(BkgConstants.BUSINESS_MODE_IN)) {
			//如果当前位置进入的组织类型为分拨中心
			if (String.valueOf(BkgConstants.ORG_TYPE_OPERATE_CENTER).equals(carPositioningVo.getOrgType())) {
				detail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_LOAD_WAIT);// 海州
				detail.setPlanSiteStatus(BkgConstants.SITE_STATUS_FOR_LOAD);
				noticeDetailVoDriver.setNoticeRuleCode("");
				noticeDetailVoSite.setNoticeRuleCode("SITE_STATUS_STATION_FOR_LOAD");
				planSitePrompt = "待装货(司机已经到达，请做好装货准备)";
				planDriverPrompt = "待装货(请在装货完成后，确认网点货量信息并点击确认按钮确认)";
			} else {

				noticeDetailVoDriver.setNoticeRuleCode("");
				noticeDetailVoSite.setNoticeRuleCode("");
				detail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_CARGO_PENDING);
				detail.setPlanSiteStatus(BkgConstants.SITE_STATUS_FOR_UNLOAD);
				planSitePrompt = "待卸货(司机已经到达，请做好卸货准备)";
				planDriverPrompt = "待卸货(请在卸货完成后，确认网点货量信息并点击确认按钮确认)";
			}
		//如果当前位置为出港
		} else if (carPositioningVo.getBussessModule().equals(BkgConstants.BUSINESS_MODE_OUT)) {
			//如果当前位置出去的组织类型为分拨中心
			if (String.valueOf(BkgConstants.ORG_TYPE_OPERATE_CENTER).equals(carPositioningVo.getOrgType())) {
				noticeDetailVoDriver.setNoticeRuleCode("");
				noticeDetailVoSite.setNoticeRuleCode("");
				detail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_CARGO_PENDING);
				detail.setPlanSiteStatus(BkgConstants.SITE_STATUS_FOR_UNLOAD);
				planSitePrompt = "待卸货(司机已经到达，请做好卸货准备)";
				planDriverPrompt = "待卸货(请在卸货完成后，确认网点货量信息并点击确认按钮确认)";
			} else {
				detail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_LOAD_WAIT);// 海州
				detail.setPlanSiteStatus(BkgConstants.SITE_STATUS_FOR_LOAD);
				noticeDetailVoDriver.setNoticeRuleCode("");
				noticeDetailVoSite.setNoticeRuleCode("SITE_STATUS_STATION_FOR_LOAD");
				planSitePrompt = "待装货(司机已经到达，请做好装货准备)";
				planDriverPrompt = "待装货(请在装货完成后，确认网点货量信息并点击确认按钮确认)";
			}
		}
		detail.setPlanSitePrompt(planSitePrompt);
		detail.setPlanDriverPrompt(planDriverPrompt);
		String siteUserPbine = getSitePhine(carPositioningVo.getStationCode());
		noticeDetailVoSite.setUserPhone(siteUserPbine);
		noticeDetailVoSite.setBusinessId(detail.getId());
		noticeDetailVoSite.setBusinessType(BkgConstants.APP_DRIVING_PLAN_DETAIL);
		noticeDetailVoDriver.setUserPhone(carPositioningVo.getPhoneMobile());
		noticeDetailVoDriver.setBusinessId(carPositioningVo.getPlanId());
		noticeDetailVoDriver.setBusinessType(BkgConstants.APP_DRIVER_TASK);
		// 更新发车计划详情
		dirvingPlanDetailService.updateById(detail);
		gerateMessage(carPositioningVo, noticeDetailVoDriver, noticeDetailVoSite);

		DirvingPlanTrace dirvingPlanTrace = new DirvingPlanTrace();
		dirvingPlanTrace.setScanStationCode(carPositioningVo.getStationCode());
		dirvingPlanTrace.setScanStationName(carPositioningVo.getStationName());
		dirvingPlanTrace.setDrivingPlanCode(carPositioningVo.getDriverPlanCode());
		dirvingPlanTrace.setStatus(BkgConstants.DIRVING_PLAN_TRACE_IN);
		/** 状态描述详情 */
		String statusDescribe = null;
		if (carPositioningVo.getBussessModule().equals(BkgConstants.BUSINESS_MODE_IN)) {
			 statusDescribe = "班车已到达" + carPositioningVo.getStationName() + "开始卸货";

		} else if (carPositioningVo.getBussessModule().equals(BkgConstants.BUSINESS_MODE_OUT)) {
			 statusDescribe = "班车已到达" + carPositioningVo.getStationName() + "开始装货";
		}
		
		log.info("班车到达,发车计划号"+carPositioningVo.getDriverPlanCode());
		dirvingPlanTrace.setStatusDescribe(statusDescribe);
		//增加发车计划跟踪信息
		dirvingPlanTraceService.addDirvingPlanTrace(dirvingPlanTrace);
	}
	/**
	 * 
	 * @Description:  (这里用一句话描述这个方法的作用) 
	 * @param carPositioningVo
	 * @param noticeDetailVoDriver
	 * @param noticeDetailVoSite
	 * @author liwei
	 * @date 2017年11月13日 下午11:26:29
	 */
	private void gerateMessage(CarPositioningVo carPositioningVo,NoticeDetailVo noticeDetailVoDriver,NoticeDetailVo noticeDetailVoSite){
		
		DeparPlanForApp deparPlanForApp=new DeparPlanForApp();
		deparPlanForApp.setDrivingPlanCode(carPositioningVo.getDriverPlanCode());
		deparPlanForApp.setWayPointCode(carPositioningVo.getStationCode());
		/*Map<String, String> map=new HashMap<String, String>();
		map.put("drivingPlanCode", carPositioningVo.getDriverPlanCode());
		map.put("way_point_code", carPositioningVo.getStationCode());*/
		List<DeparPlanForApp> deparPlanForApps=dirvingPlanService.findPLanBySiteCode(deparPlanForApp);
		if(null == deparPlanForApps || deparPlanForApps.size()==0){
			return;
		}
		noticeDetailBiz.generateMessage(deparPlanForApps.get(0), noticeDetailVoDriver);
		noticeDetailBiz.generateMessage(deparPlanForApps.get(0), noticeDetailVoSite);
	}
	/**
	 * 
	 * @Description: 电子围栏离开--本站提示，下一站提示，即将前往下一站。下一站 待执行
	 * @author liwei
	 * @date 2017年11月13日 下午10:29:42
	 */
	@Override
	public  void sendOut(CarPositioningVo carPositioningVo) {
		DirvingPlanVo dirvingPlanVo = new DirvingPlanVo();
		dirvingPlanVo.setDrivingPlanCode(carPositioningVo.getDriverPlanCode());
		/**做前序网点更新提示语*/
		DirvingPlanDetail dirvingPlanDetailpro=dirvingPlanDetailService.findById(carPositioningVo.getPlanDetailId());
		if(null == dirvingPlanDetailpro){
			log.info("发车计划明细不存在"+carPositioningVo.getPlanDetailId());
			return ;
		}
		//加入离开事件校验---当上一状态不满足时，不允许离开。未确认装货，未确认卸货
		if (!(BkgConstants.SITE_STATUS_LOAD.equals(dirvingPlanDetailpro.getPlanSiteStatus()) || BkgConstants.SITE_STATUS_UNLOAD
				.equals(dirvingPlanDetailpro.getPlanSiteStatus()))) {
			log.info("站点【" + dirvingPlanDetailpro.getWayPointName() + "】未确认装货或者未确认卸货");
			return;
		}
		String planSitePrompt = "";
		String planDriverPrompt = "";
		if (carPositioningVo.getBussessModule().equals(BkgConstants.BUSINESS_MODE_IN)) {
			planSitePrompt = "本站点已完成";
			if (null == dirvingPlanDetailpro.getAppraiseTime())
				planSitePrompt = "卸货已完成请对司机的服务质量进行评价";

		} else if (carPositioningVo.getBussessModule().equals(BkgConstants.BUSINESS_MODE_OUT)) {
			if (null == dirvingPlanDetailpro.getAppraiseTime())
				planSitePrompt = "装货已完成请对司机的服务质量进行评价";
		}
		dirvingPlanDetailpro.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_NEXT_STATION);
		dirvingPlanDetailpro.setPlanSiteStatus(BkgConstants.SITE_STATUS_NEXT_STATION);

		dirvingPlanDetailpro.setPlanSitePrompt(planSitePrompt);
		dirvingPlanDetailpro.setPlanDriverPrompt(planDriverPrompt);
		dirvingPlanDetailService.updateById(dirvingPlanDetailpro);
		List<DirvingPlanDetail> details = visibleTransportService.queryDirvingPlanDetail(dirvingPlanVo);
		if (null == details || details.size() == 0) {
			log.info("发车计划明细不存在"+carPositioningVo.getDriverPlanCode());
			return;
		}
		//如果匹配到的节点，不存在下一个，则已经到最后一个站点，则不进行任何处理
		DirvingPlanDetail dirvingPlanDetailcurr = new DirvingPlanDetail();
		boolean nextFlag=false;
		for (int i = 0; i < details.size(); i++) {
			dirvingPlanDetailcurr = details.get(i);
			if (dirvingPlanDetailcurr.getWayPointCode().equals(carPositioningVo.getStationCode())) {
				DirvingPlanDetail dpd = new DirvingPlanDetail();
				dpd.setId(dirvingPlanDetailcurr.getId());
				if (i < details.size() - 1) {
					dirvingPlanDetailcurr = details.get(i + 1);
					//将下一站点的编码、名称赋值给上一站点的NextPointCode字段
					dpd.setNextPointCode(dirvingPlanDetailcurr.getWayPointCode());
					dpd.setNextPointName(dirvingPlanDetailcurr.getWayPointName());
					dirvingPlanDetailService.updateById(dpd);
					break;
				}else{
					nextFlag=true;
				}

			}
		}
		//无下一站，则代表已终止
		if(nextFlag){
			//将发车计划执行状态修改为已执行
			DirvingPlan dirvingPlan=new DirvingPlan();
			dirvingPlan.setId(carPositioningVo.getPlanId());
			//设置为
			dirvingPlan.setStatus(BkgConstants.PLAN_CODE_EXECUTE);
			dirvingPlanService.updateById(dirvingPlan);
			//清除发车计划缓存
			carPositioningCache.remove(carPositioningVo.getDriverPlanCode());
			return ;
		}
		//缓存获取组织机构扩展信息
		OrgExtendVo orgExtendVo = orgExtendCache.doGet(dirvingPlanDetailcurr.getWayPointCode());
		if(null==orgExtendVo){
			log.info("此机构未维护对应的扩展资料："+dirvingPlanDetailcurr.getWayPointCode());
			return;
		}
		carPositioningVo.setStationCode(dirvingPlanDetailcurr.getWayPointCode());
		carPositioningVo.setStationName(dirvingPlanDetailcurr.getWayPointName());
		carPositioningVo.setLat(orgExtendVo.getLat());
		carPositioningVo.setLng(orgExtendVo.getLng());
		carPositioningVo.setArriveFlag(false);
		carPositioningVo.setDistane(Double.valueOf(orgExtendVo.getElectronicRail()));
		OmgCmsOrgVo omgCmsOrgVo=omgCmsOrgBiz.findByBaseOrgCode(dirvingPlanDetailcurr.getWayPointCode());
		if (null != omgCmsOrgVo)
			carPositioningVo.setOrgType(omgCmsOrgVo.getOrgType().toString());
		///
		carPositioningVo.setPlanDetailId(dirvingPlanDetailcurr.getId());
		//刷新缓存
		carPositioningCache.set(carPositioningVo.getDriverPlanCode(), carPositioningVo);
		/*
		 * 1,根据发车计划详情进行更新发车计划详情
		 */
		DirvingPlanDetail detail = new DirvingPlanDetail();
		detail.setId(carPositioningVo.getPlanDetailId());
		if (carPositioningVo.getBussessModule().equals(BkgConstants.BUSINESS_MODE_IN)) {
			if ( String.valueOf(BkgConstants.ORG_TYPE_OPERATE_CENTER).equals(carPositioningVo.getOrgType())) {//首站分拨待装货
				detail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_NEXT_STATION);
				detail.setPlanSiteStatus(BkgConstants.SITE_STATUS_NEXT_STATION);
				planSitePrompt="本站点已完成(即将到达【"+carPositioningVo.getStationName()+"】,请做好装货准备)";
				planDriverPrompt="(即将到达【"+carPositioningVo.getStationName()+"】,请做好装货准备)";
			} else {
				detail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_NEXT_STATION);
				detail.setPlanSiteStatus(BkgConstants.SITE_STATUS_NEXT_STATION);
				planSitePrompt="本站点已完成(即将到达【"+carPositioningVo.getStationName()+"】,请做好卸货准备";
				planDriverPrompt="本站点已完成 (司机即将到达，请做好卸货准备)";
			}
		} else if (carPositioningVo.getBussessModule().equals(BkgConstants.BUSINESS_MODE_OUT)) {
			if (String.valueOf(BkgConstants.ORG_TYPE_OPERATE_CENTER).equals(carPositioningVo.getOrgType())) {
				detail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_NEXT_STATION);
				detail.setPlanSiteStatus(BkgConstants.SITE_STATUS_NEXT_STATION);
				planSitePrompt="本站点已完成(即将到达【"+carPositioningVo.getStationName()+"】,请做好卸货准备";
				planDriverPrompt="本站点已完成 (司机即将到达，请做好卸货准备)";
			} else {
				detail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_NEXT_STATION);//带装货
				detail.setPlanSiteStatus(BkgConstants.SITE_STATUS_NEXT_STATION);
			
				planSitePrompt="本站点已完成(即将到达【"+carPositioningVo.getStationName()+"】,请做好装货准备)";
				planDriverPrompt="(即将到达【"+carPositioningVo.getStationName()+"】,请做好装货准备)";
			}
		}
		
		detail.setPlanSitePrompt(planSitePrompt);
		detail.setPlanDriverPrompt(planDriverPrompt);
		
		DirvingPlanTrace dirvingPlanTrace=new DirvingPlanTrace();
		dirvingPlanTrace.setScanStationCode(carPositioningVo.getStationCode());
		dirvingPlanTrace.setScanStationName(carPositioningVo.getStationName());
		dirvingPlanTrace.setDrivingPlanCode(carPositioningVo.getDriverPlanCode());
		//出港
		dirvingPlanTrace.setStatus(BkgConstants.DIRVING_PLAN_TRACE_OUT);
		/**状态描述详情*/
		String statusDescribe="提货完成，准备开往"+carPositioningVo.getStationName();
		dirvingPlanTrace.setStatusDescribe(statusDescribe);
		//增加发车计划跟踪信息
		dirvingPlanTraceService.addDirvingPlanTrace(dirvingPlanTrace);
		//回写状态
		DirvingPlan dirvingPlan=new DirvingPlan();
		dirvingPlan.setId(carPositioningVo.getPlanId());
		dirvingPlan.setNextStation(dirvingPlanDetailcurr.getWayPointName());
		dirvingPlan.setNextStationCode(dirvingPlanDetailcurr.getWayPointCode());
		dirvingPlanService.updateById(dirvingPlan);
		
		/** 状态描述详情 */
		log.info("班车离开,发车计划号"+carPositioningVo.getDriverPlanCode());
		// 更新
		dirvingPlanDetailService.updateById(detail);
	}
	
	/**
	 * 
	 * @Description: 根据机构编码获取网点老板手机号
	 * @return
	 * @author liwei
	 * @date 2017年11月16日 下午3:47:58
	 */
	@Override
	public String getSitePhine(String baseOrgCode){
		MobileuserVo mobileuserVo=new MobileuserVo();
		
		mobileuserVo.setBaseOrgCode(baseOrgCode);
		 mobileuserVo.setDotType(true);
		List<MobileuserVo> mobileuserVos=mobileuserService.findByCondition(mobileuserVo);
		if(null == mobileuserVos || mobileuserVos.size()==0){
			return null;
		}
		mobileuserVo=mobileuserVos.get(0);
		if(null==mobileuserVo){
			return null;
		}
		return mobileuserVo.getMobilephone();	}
	/**
	 * 
	 * @Description: 车辆位置在缓存中不存在时进行处理--不存在正在执行中的发车计划时，不回写缓存
	 * @param driverPhone
	 * @author liwei
	 * @date 2017年11月13日 下午8:05:50
	 */
	@Override
	public boolean carNotExist(DirvingPlanVo dirvingPlanVoNew) {
		String planCode = dirvingPlanVoNew.getDrivingPlanCode();
		// 获取发车计划 
		DirvingPlan dirvingPlan = dirvingPlanService.findByPlanCode(planCode);
		if (null == dirvingPlan) {
			log.info("车辆位置在缓存中不存在时，发车计划不存在:" + planCode);
			return false;
		}
		// 发车计划状态
		if (BkgConstants.PLAN_CODE_FINISH.equals(dirvingPlan.getStatus())||BkgConstants.PLAN_CODE_EXECUTE.equals(dirvingPlan.getStatus())) {
			log.info("车辆位置在缓存中不存在时，本次发车计划已经终止或者已执行，不再接受相关电子围栏数据:" + planCode);
			return false;
		}
		DirvingPlanVo dirvingPlanVo = ObjectConvertUtil.convertObject(dirvingPlan, DirvingPlanVo.class);
		if (null == dirvingPlanVo) {
			return false;
		}
		List<DirvingPlanDetail> details = visibleTransportService.queryDirvingPlanDetail(dirvingPlanVo);
		if (null == details || details.size() == 0) {
			log.info("车辆位置在缓存中不存在时，不存在发车计划明细:" + planCode);
			return false;
		}
		// 先获取第一个，后面处理
		DirvingPlanDetail detail  = details.get(0);
		OrgExtendVo orgExtendVo = orgExtendCache.get(detail.getWayPointCode());
		if (!getdistance(orgExtendVo, dirvingPlanVoNew, detail)) {
			log.info("车辆位置在缓存中不存在时，当前车辆还未进入电子围栏范围内！" );
			return false;
		}
		//设置执行中
		dirvingPlan.setStatus(BkgConstants.PLAN_CODE_EXECUTING);
		dirvingPlanService.updateById(dirvingPlan);
		// 获取途径节点
		String baseOrgCode = detail.getWayPointCode();

		OmgCmsOrgVo omgCmsOrgVo = omgCmsOrgBiz.findByBaseOrgCode(baseOrgCode);
		if (null == orgExtendVo || null == omgCmsOrgVo) {
			log.info("车辆位置在缓存中不存在时，组织机构扩展表不存在对应的记录:" + baseOrgCode);
			return false;
		}
		if (StringUtil.isBlank(orgExtendVo.getElectronicRail()) || StringUtil.isBlank(orgExtendVo.getLat())
				|| StringUtil.isBlank(orgExtendVo.getLng())) {
			log.info("车辆位置在缓存中不存在时，组织机构扩展表不存在电子围栏半径，或者经纬度");
			return false;
		}
		CarPositioningVo carPositioningVo = new CarPositioningVo();
		/***/
		// 设置到达站点编码
		carPositioningVo.setStationCode(baseOrgCode);
		carPositioningVo.setStationName(detail.getWayPointName());
		// 设置发车计划编号
		carPositioningVo.setDriverPlanCode(dirvingPlanVo.getDrivingPlanCode());
		// 设置经纬度
		carPositioningVo.setLat(orgExtendVo.getLat());
		carPositioningVo.setLng(orgExtendVo.getLng());
		carPositioningVo.setArriveFlag(false);
		// 设置机构类型
		carPositioningVo.setOrgType(omgCmsOrgVo.getOrgType().toString());
		Double distance = Double.parseDouble(orgExtendVo.getElectronicRail());
		/** 距离 */
		carPositioningVo.setDistane(distance);
		// 发车计划详情ID
		carPositioningVo.setPlanDetailId(detail.getId());
		carPositioningVo.setPhoneMobile(dirvingPlanVo.getDriverPhone());
		carPositioningVo.setCurrentlat(dirvingPlanVoNew.getLatitude());
		carPositioningVo.setCurrentlng(dirvingPlanVoNew.getLongitude());
		// 业务模式
		carPositioningVo.setBussessModule(dirvingPlanVo.getBusinessMode());
		carPositioningVo.setPlanId(dirvingPlanVo.getId());
		// 写入缓存
		carPositioningCache.set(planCode, carPositioningVo);
		return true;
	}
	
	/**
	 * 
	 * @Description: (这里用一句话描述这个方法的作用) 
	 * @param orgExtendVo
	 * @param dirvingPlanVo
	 * @param dirvingPlanDetail
	 * @return
	 * @author liwei
	 * @date 2017年11月14日 下午7:53:29
	 */
	@Override
	public boolean getdistance(OrgExtendVo orgExtendVo, DirvingPlanVo dirvingPlanVo,DirvingPlanDetail dirvingPlanDetail) {
		if (null== orgExtendVo||null == orgExtendVo.getLat() || null == orgExtendVo.getLng()
				|| null == dirvingPlanVo.getLatitude() || null == dirvingPlanVo.getLongitude()) {
			return false;
		}
		log.info("车辆当前位置：" + dirvingPlanVo.getLatitude() + ","
				+ dirvingPlanVo.getLongitude());
		Double statLat = Double.parseDouble(orgExtendVo.getLat());
		Double statLng = Double.parseDouble(orgExtendVo.getLng());
		Double endLat = Double.parseDouble(dirvingPlanVo.getLatitude());//纬度
		Double endlng = Double.parseDouble(dirvingPlanVo.getLongitude());//经度
		log.info("A-"+statLat+" B-"+statLng+" C-"+endLat+" D-"+endlng);
		//A-31.163618B-121.191627C-121.191908D-31.163424
		//计算距离
		Double catualdistance = BaiduDistanceUtil.getDistance(statLat, statLng, endLat, endlng);
		CarPositioningVo carPositioningVo=new CarPositioningVo();
		carPositioningVo.setPlanDetailId(dirvingPlanDetail.getId());
		carPositioningVo.setBussessModule(dirvingPlanVo.getBusinessMode());
		if(StringUtil.isBlank(orgExtendVo.getElectronicRail())){
			log.info("组织机构扩展信息不存在电子围栏半径："+orgExtendVo.getElectronicRail());
			return false;
		}
		//获取电子围栏半径
		Double distance = Double.parseDouble(orgExtendVo.getElectronicRail());
		if(null == distance){
			log.info("计算两点间距离时，站点设置的电子围栏半径为空");
			return false;
		}
		log.info("计算两点间距离为："+catualdistance);
		//仅仅用来标记到达某一站点
		if(catualdistance<distance){
			return true;
		}else{
			return false;
		}
	}
	/**
	 * 终止班操作
	 * @Description: TODO(这里用一句话描述这个方法的作用) 
	 * @param classCode
	 * @param drivingPlanCode
	 * @return
	 * @author liuhai
	 * @date 2017年11月16日 下午4:36:12
	 */
	@Transactional(readOnly=false,propagation=Propagation.REQUIRED)
	public int stopLineGroup(String classCode,String drivingPlanCode){
		DirvingPlanVo dirvingPlanVo=new DirvingPlanVo();
		dirvingPlanVo.setDrivingPlanCode(drivingPlanCode);
		dirvingPlanVo.setStatus(BkgConstants.PLAN_CODE_FINISH);
		//查询班次信息
		LineGroup lineGroup= lineGroupService.queryById(classCode);
		if(lineGroup !=null){
			lineGroup.setStatus(BkgConstants.LINE_GROUP_STATUS_PLAN_STOP);//班次状态-00 已终止
			//更新班次
			lineGroupService.updateById(lineGroup);
		}
		//将该班次下面的路段信息lineGroupCode 置为空
		List<LineGroupDetail> details=lineGroupDetailService.queryByWorkDetailId(classCode);
		if(CollectionUtils.isNotEmpty(details)){
			for(LineGroupDetail det:details){
				det.setLineGroupCode(null);
				//更新班次详情
				lineGroupDetailService.updateById(det);
			}
		}
		//终止发车计划状态
		//终止异常发送消息
//		DirvingPlan plan=dirvingPlanService.findByPlanCode(drivingPlanCode);
//		if(plan !=null){
//			if(StringUtils.isNotBlank(plan.getDriverPhone())){
//				plan.setDriverPhone(plan.getDriverPhone());
//				sendNotice("SYSTEN_EXCEPTION_END_DPT",plan,plan.getId(),BkgConstants.APP_DRIVER_TASK);//发送给司机端
//				sendNotice("SYSTEN_EXCEPTION_END_DOT",plan,plan.getId(),BkgConstants.APP_DRIVING_PLAN_DETAIL);//发送给网点端 
//			}
//		}
		return visibleTransportService.updateTransportTrail(dirvingPlanVo);
	}
	/**
	 * @Description: 发送消息
	 * @param DirvingPlan plan
	 * @return
	 * @date 2017年12月25日 下午9:58:07
	 */
	private int sendNotice(String noticeRuleCode,DirvingPlan plan,Long businessId,String businessType) {
		NoticeDetailVo noticeDetailVo=new NoticeDetailVo();
		noticeDetailVo.setNoticeRuleCode(noticeRuleCode);
		noticeDetailVo.setCreateEmp(plan.getUpdateEmp());
		noticeDetailVo.setCreateOrg(plan.getUpdateOrg());
		noticeDetailVo.setCreateTime(plan.getUpdateTime());
		noticeDetailVo.setUserPhone(plan.getDriverPhone());
		noticeDetailVo.setBusinessId(businessId);
		noticeDetailVo.setBusinessType(businessType);
		noticeDetailVo.setDisplayWays(BkgConstants.DISPLAY_WAYS_HOME+","+BkgConstants.DISPLAY_WAYS_NOTICE+","+BkgConstants.DISPLAY_WAYS_NEWS);
		int noticeDetailRes =noticeDetailBiz.generateMessage(plan, noticeDetailVo);
		return noticeDetailRes;
	}
	/**
	 * 保存异常上报
	 * @Description: TODO(这里用一句话描述这个方法的作用) 
	 * @param exceptionManager
	 * @return
	 * @author liuhai
	 * @date 2017年11月16日 下午11:49:47
	 */
	public List<ExceptionManager> saveReportException(ExceptionManager exceptionManager,String exceptionCode,SucCurrentUser userInfo){
		DirvingPlanVo dPlanVo=new DirvingPlanVo();
		DirvingPlan dirvingPlan=new DirvingPlan();
		String nextStationCode="";
		dPlanVo.setDrivingPlanCode(exceptionManager.getStartTrunkCode());
		//根据发车计划单号查询发车计划信息
		List<DirvingPlanVo> oldDpList=visibleTransportService.queryDirvingPlan(dPlanVo);
		String lineGroupCode="";
		if(CollectionUtils.isNotEmpty(oldDpList)){
			nextStationCode=oldDpList.get(0).getNextStationCode();
			lineGroupCode=oldDpList.get(0).getLineGroupCode();
			dirvingPlan.setId(oldDpList.get(0).getId());
		}
		ExceptionManager em=new ExceptionManager();
		em.setStartTrunkCode(exceptionManager.getStartTrunkCode());
		em.setLineGroupCode(lineGroupCode);
		em.setExcepType(exceptionManager.getExcepType());
		em.setAppSrage(BkgConstants.APP_STAGE_PLAT);
		em.setCreateEmp(userInfo.getEmpName());
		em.setReason(exceptionManager.getReason());
		em.setCreateTime(new Date());
		em.setExceptionCode(exceptionCode);
		em.setExceptionStatus(BkgConstants.EXCEPTION_WAIT_CONFIRM);//待确认
		//保存异常信息
		int i=visibleTransportService.insertExceptionReport(em);
		List<ExceptionManager> exceptionList=null;
		if(i==1){
			//更新发车计划记录中是否有异常字段
			dirvingPlan.setAbnormalState(BkgConstants.IS_EXCEPTION_IS);//有异常状态
			dirvingPlanService.updateById(dirvingPlan);
			
			//查询发车计划详细
			List<DirvingPlanDetail> list = dirvingPlanDetailService.findByDrivePlanCode(exceptionManager.getStartTrunkCode());
			List<String> siteCodes=new ArrayList<String>();
			if(CollectionUtils.isNotEmpty(list)){
				for(DirvingPlanDetail detail:list){
					if(detail.getSort()==1 || nextStationCode.equals(detail.getNextPointCode())){
						continue;
					}
					String pointCode=detail.getWayPointCode();
					if(StringUtils.isNoneBlank(pointCode)){
						siteCodes.add(pointCode);
					}
				}
			}
			//查询发车计划
			DirvingPlan planVo=dirvingPlanService.findByrivingPlanCode(exceptionManager.getStartTrunkCode());
			//发送消息到    该发车计划未执行的网点
			List<Mobileuser> userList= mobileuserService.findPhoneByBaseOrgCode(siteCodes);
			//给网点老板发送信息
			if(planVo!=null&&CollectionUtils.isNotEmpty(userList)){
				for(Mobileuser stationBoss:userList){
					planVo.setDriverPhone(stationBoss.getMobilephone());
					addSendDirvingPlanNotice(planVo,stationBoss.getMobilephone(),"EXCEPTION_REPORT_CONFIRM_DOT");
				}
			}
			//发送消息到      PC、司机
			if(planVo!=null&&StringUtils.isNotBlank(dirvingPlan.getDriverPhone())){
				planVo.setDriverPhone(dirvingPlan.getDriverPhone());
				addSendDirvingPlanNotice(planVo,dirvingPlan.getDriverPhone(),"EXCEPTION_REPORT_CONFIRM_DPT");
				addSendDirvingPlanNotice(planVo,dirvingPlan.getDriverPhone(),"EXCEPTION_REPORT_CONFIRM_BKG");
			}
			
			dPlanVo.setUtf1(exceptionCode);
			//查询异常列表
			exceptionList=visibleTransportService.queryExceptionInfo(dPlanVo);
		}
		return exceptionList;
	}
	/**
	* 新增需求或新增发车计划
	* @param lineGroupStr
	* @param drivePlanStr
	* @param detailVos
	* @return 
	 */
	@Transactional(readOnly=false,propagation=Propagation.REQUIRED)
	public int saveLineGroupAndDrivePlan(String lineGroupStr, String drivePlanStr, String detailVos,SucCurrentUser userInfo){
		int i=0;
		DecimalFormat    df   = new DecimalFormat("######0.00");   
		LineGroup lineGroup=com.alibaba.fastjson.JSONObject.parseObject(lineGroupStr,LineGroup.class);
		String remark=lineGroup.getRemark();
		String carTypeTemp=lineGroup.getCarType();
		Date arrivalTime=lineGroup.getArrivalTime();
		Date departTime=lineGroup.getDepartTime();
		
		DirvingPlan dirvingPlanFmat=com.alibaba.fastjson.JSONObject.parseObject(drivePlanStr,DirvingPlan.class);
		List<LineGroupDetail> lineGroupDetails=(List<LineGroupDetail>)JSONArray.parseArray(detailVos, LineGroupDetail.class);
		CarManageVo carManageVo=new CarManageVo();
		carManageVo.setCarNumber(dirvingPlanFmat.getPlateNumber());//传过来的是车辆编码
		//通过车辆编码查询车辆信息
		List<CarManageVo> cmList=carManageService.findByVo(carManageVo);
		String plateNumber="";
		String carType="";
		double value= 1L;
		if(CollectionUtils.isNotEmpty(cmList)){
			plateNumber=cmList.get(0).getPlateNumbers();
			carType=cmList.get(0).getCarType();
		}
		TruckCostManagementVo truckCostManagementVo=new TruckCostManagementVo();

		
		String lineGroupCode="";
		if(lineGroup!=null){
			lineGroupCode = lineGroup.getLineGroupCode();
			//新生成班次单号可在原班次单号基础上加特殊标识(如_1)来识别该班次为重新生成的班次。
			if (StringUtils.isNotBlank(lineGroupCode)) {
				lineGroup=lineGroupBiz.findByLineGroupCode(lineGroupCode);
				lineGroup.setStatus(BkgConstants.LINE_GROUP_STATUS_PLAN_STOP);
				lineGroupBiz.updateLineGroup(lineGroup);//把 原来的状态设置为已终止并保存起来
				
				LineGroupVo temp=new LineGroupVo();
				if(lineGroupCode.contains("_")){
					lineGroupCode=lineGroupCode.substring(0, lineGroupCode.indexOf("_"));
				}
				temp.setLineGroupCode(lineGroupCode);
				int count=lineGroupBiz.countByLineGroupVo(temp);
				lineGroupCode=lineGroupCode+"_"+count;
				lineGroup.setLineGroupCode(lineGroupCode);//新生成班次单号可在原班次单号基础上加特殊标识(如_1)来识别该班次为重新生成的班次。
				lineGroup.setLineGroupName(lineGroupCode);
			}else{
				lineGroupCode = redisIdsWorker.nextId(IdsPrefix.BC);
				lineGroup.setLineGroupCode(lineGroupCode);
				lineGroup.setLineGroupName(lineGroupCode);
			}
		}
		String drivingPlanCode="";
		int count=0;
		DirvingPlan dirvingPlan=new DirvingPlan();
		if(dirvingPlanFmat!=null&&lineGroup!=null){
			drivingPlanCode=dirvingPlanFmat.getDrivingPlanCode();
			dirvingPlan=dirvingPlanService.findByrivingPlanCode(drivingPlanCode);
			if(dirvingPlan!=null){
				//判断进出港
				if("1".equals(dirvingPlan.getBusinessMode())){
					truckCostManagementVo.setBelongSiteCode(dirvingPlan.getStartOrgCode());	
				}else if("2".equals(dirvingPlan.getBusinessMode())){
					truckCostManagementVo.setBelongSiteCode(dirvingPlan.getEndOrgCode());	
				}
				truckCostManagementVo.setTruckType(dirvingPlan.getDemandType());
				truckCostManagementVo.setTruckConcrete(carType);
				List<TruckCostManagementVo> tmList=truckCostManagementService.findByCondition(truckCostManagementVo);
				if(CollectionUtils.isNotEmpty(tmList)){
					value=tmList.get(0).getTruckVolume()-tmList.get(0).getBufferVolume();
				}
				
				//查询司机信息
				Dirver dirver = dirverService.findById(Long.parseLong(dirvingPlanFmat.getDriverPhone()));
				if(dirver!=null){
					dirvingPlan.setDriverPhone(dirver.getMobilePhone());
					dirvingPlan.setDirverName(dirver.getDriverName());
				}
				dirvingPlan.setStatus(BkgConstants.PLAN_CODE_FINISH);
				dirvingPlanService.updateById(dirvingPlan);//把 原来的发车计划状态设置为已终止并保存起来
				
				DirvingPlanVo temp=new DirvingPlanVo();
				if(drivingPlanCode.contains("_")){
					drivingPlanCode=drivingPlanCode.substring(0, drivingPlanCode.indexOf("_"));
				}
				temp.setDrivingPlanCode(drivingPlanCode);
				count=dirvingPlanService.getUncomfirmDrivingPlanNum(temp);
				drivingPlanCode=drivingPlanCode+"_"+count;
				//新增发车计划主信息
				//deparTurePlan = redisIdsWorker.nextId(IdsPrefix.FC);
				dirvingPlan.setDrivingPlanCode(drivingPlanCode);
				dirvingPlan.setDrivingPlanName(drivingPlanCode);
				dirvingPlan.setPlateNumber(plateNumber);
				dirvingPlan.setCarCode(dirvingPlanFmat.getPlateNumber());
				//dirvingPlan.setStatus(BkgConstants.PLAN_CODE_GENERATED);
				dirvingPlan.setStatus(BkgConstants.PLAN_CODE_UNCONFIRMED);//把 新的发车计划状态设置为司机未确认
				dirvingPlan.setCreateTime(new Date());
				dirvingPlan.setCreateEmp(userInfo.getEmpName());
				dirvingPlan.setLineGroupCode(lineGroupCode+"_"+count);
				dirvingPlan.setVersion(0);
				dirvingPlan.setCreateOrg(userInfo.getCmsOrgName());
				dirvingPlan.setUpdateEmp(userInfo.getEmpName());
				dirvingPlan.setUpdateOrg(userInfo.getCmsOrgName());
				dirvingPlan.setUpdateTime(new Date());
				dirvingPlan.setLoadingRate(value<dirvingPlan.getLineGroupTotalVolume()?1L:(dirvingPlan.getLineGroupTotalVolume()/(value<0?1L:value)));//重新计算满载率
				
				dirvingPlan.setRemark(remark);
				dirvingPlan.setCarType(carTypeTemp);
				dirvingPlan.setArrivalTime(arrivalTime);
				dirvingPlan.setDepartTime(departTime);
				dirvingPlan.setAbnormalState("");//把是否有异常置为否  
				dirvingPlan.setId(null);
				//增加发车计划
				dirvingPlanService.addDirvingPlan(dirvingPlan);
				//给司机发送消息
				if(StringUtils.isNotBlank(dirvingPlan.getDriverPhone())){
					//请尽快确认发车计划!
				    addSendDirvingPlanNotice(dirvingPlan,dirvingPlan.getDriverPhone(),"DRIVER_STATUS_CONFIRM_WAIT");
				}
			}
		}
		if(CollectionUtils.isNotEmpty(lineGroupDetails)){
			for(LineGroupDetail detail : lineGroupDetails){
				detail.setId(null);
				detail.setLineGroupCode(lineGroupCode);
				//增加班次
				lineGroupDetailService.addLineGroupDetail(detail);
				
				//新增发车计划子信息
				DirvingPlanDetail dirvingPlanDetail = new DirvingPlanDetail();
				dirvingPlanDetail.setSort(detail.getSort());
				dirvingPlanDetail.setDrivingPlanCode(drivingPlanCode);
				dirvingPlanDetail.setWayPointCode(detail.getWayPointCode());
				dirvingPlanDetail.setWayPointName(detail.getWayPointName());
				dirvingPlanDetail.setForecastVolume(detail.getVolume());
				dirvingPlanDetail.setForecastWeight(detail.getWeight());
				dirvingPlanDetail.setForecastEndTime(detail.getEndTime());
				dirvingPlanDetail.setForecastRuningTime(detail.getRuningTime());
				dirvingPlanDetail.setForecastLoadUnloadTine(detail.getLoadUnloadTime());
				dirvingPlanDetail.setForecastDistance(detail.getDistance());
				dirvingPlanDetail.setCreateTime(new Date());
				dirvingPlanDetail.setCreateEmp(userInfo.getEmpName());
				dirvingPlanDetail.setVersion(0);
				dirvingPlanDetail.setCreateOrg(userInfo.getCmsOrgName());
				if(1==dirvingPlanDetail.getSort()){
					dirvingPlanDetail.setPlanDriverStatus(BkgConstants.DRIVER_STATUS_CONFIRM_WAIT);//把sort 等于1的司机状态改为 待确认
				}
				//增加发车计划详情
				dirvingPlanDetailService.addDirvingPlanDetail(dirvingPlanDetail);
			}
		}
		if(lineGroup!=null){
			lineGroup.setStatus(BkgConstants.LINE_GROUP_STATUS_PLAN_CREATE);//班次状态-已生成发车计划
			lineGroup.setDrivingPlanCombinCode(drivingPlanCode);
			lineGroup.setLoadFactor(value<lineGroup.getTotalVolume()?1L:(lineGroup.getTotalVolume()/(value<0?1L:value)));
			lineGroup.setId(null);
			//增加班次
			i=lineGroupService.addLineGroup(lineGroup);	
		}
		if(dirvingPlan!=null&&StringUtils.isNotBlank(dirvingPlan.getDriverPhone())){
			sendNotice("SYSTEN_DRIVERPLAN_CONFIRM_DPT",dirvingPlan,dirvingPlan.getId(),BkgConstants.APP_DRIVER_TASK);// 重绑发车计划待确认    发送给司机端
			 
		}
		List<DirvingPlanDetail> pcDetail= dirvingPlanDetailService.findByDrivePlanCode(drivingPlanCode);
		if(dirvingPlan!=null&&CollectionUtils.isNotEmpty(pcDetail)){
			for(int j=0;j<pcDetail.size();j++){
				String phoneNum=getSitePhine(pcDetail.get(j).getWayPointCode());
				dirvingPlan.setDriverPhone(phoneNum);
				sendNotice("SYSTEN_DRIVERPLAN_CONFIRM_DOT",dirvingPlan,pcDetail.get(j).getId(),BkgConstants.APP_DRIVING_PLAN_DETAIL);// 重绑发车计划待确认   发送给网点端
			}
		}
		return i;
	}
	/**
	 * 
	 * @Description: 刷新位置信息
	 * @param dirvingPlanVo
	 * @author liuhai
	 * @date 2017年12月4日 下午8:04:05
	 */
	public HashMap<String,Boolean> refreshPositionMethod(DirvingPlanVo dirvingPlanVo){
		boolean breakFlag = false;
		HashMap<String,Boolean> map=new HashMap<String,Boolean>();
		// 通过缓存得到发车计划编号
		DirvingPlanVo dirvingPlanVo2 =dirierPlanCache.get(dirvingPlanVo.getDriverPhone());
		if(null == dirvingPlanVo2){
			log.info("当前不存在尚未执行的发车计划："+dirvingPlanVo.getDriverPhone());
			map.put("ex", true);
			return map;
		}
		dirvingPlanVo.setDrivingPlanCode(dirvingPlanVo2.getDrivingPlanCode());
		//查询发车计划 详情
		List<DirvingPlanDetail> details = visibleTransportService.queryDirvingPlanDetail(dirvingPlanVo);
		if (null == details || details.size() == 0) {
			log.info("车辆位置在缓存中不存在时，不存在发车计划明细:" + dirvingPlanVo2.getDrivingPlanCode());
			map.put("ex", true);
			return map;
		}

		// 查询发车计划 
		DirvingPlan dirvingPlan = dirvingPlanService.findByPlanCode(dirvingPlanVo2.getDrivingPlanCode());
		for(int i=0;i<details.size();i++){
			DirvingPlanDetail dirvingPlanDetail=details.get(i);
			OrgExtendVo orgExtendVoDetail = orgExtendCache.get(dirvingPlanDetail.getWayPointCode());
			Boolean getdistance=getdistance(orgExtendVoDetail, dirvingPlanVo, dirvingPlanDetail);
			List<String> list=Arrays.asList(resportStatus);
			//找到和其中一站点半径范围内
			if (getdistance) {
				//在第一个节点时或大于第一个节点时的前一个节点司机状态不是“待执行”或”待确定“状态即已为其他状态时则表明该车辆在前一个节点已触发过电子围栏状态已改变了
				if((dirvingPlanDetail.getSort()==1)||(i>=1 && list.contains(details.get(i-1).getPlanDriverStatus()))){
					CarPositioningVo carPositioningVo = new CarPositioningVo();
					/***/
					// 设置到达站点编码
					carPositioningVo.setStationCode(orgExtendVoDetail.getBaseOrgCode());
					// 设置发车计划编号
					carPositioningVo.setDriverPlanCode(dirvingPlanVo.getDrivingPlanCode());
					// 设置经纬度
					carPositioningVo.setLat(orgExtendVoDetail.getLat());
					carPositioningVo.setLng(orgExtendVoDetail.getLng());
					// 设置机构类型
					carPositioningVo.setOrgType(orgExtendVoDetail.getSiteType());
					Double distance = Double.parseDouble(orgExtendVoDetail.getElectronicRail());
					/** 距离 */
					carPositioningVo.setDistane(distance);
					// 发车计划详情ID
					carPositioningVo.setPlanDetailId(dirvingPlanDetail.getId());
					carPositioningVo.setPhoneMobile(dirvingPlanVo.getDriverPhone());
					carPositioningVo.setCurrentlat(dirvingPlanVo.getLatitude());
					carPositioningVo.setCurrentlng(dirvingPlanVo.getLongitude());
					// 业务模式
					carPositioningVo.setBussessModule(dirvingPlan.getBusinessMode());
					carPositioningVo.setPlanId(dirvingPlanVo.getId());
					//只有当状态为待执行或下一站时执行到达操作
					if(BkgConstants.DRIVER_STATUS_EXECUTE_WAIT.equals(details.get(i).getPlanDriverStatus())||BkgConstants.DRIVER_STATUS_NEXT_STATION.equals(details.get(i).getPlanDriverStatus())){
						arriveProcess(carPositioningVo);
						//回写状态
						DirvingPlan dp=new DirvingPlan();
						dp.setId(carPositioningVo.getPlanId());
						dp.setNextStation(dirvingPlanDetail.getWayPointName());
						dp.setNextStationCode(dirvingPlanDetail.getWayPointCode());
						dirvingPlanService.updateById(dirvingPlan);
						map.put("success", true);
					}
					//介入到达事件 A点
				}else if(i>=1&&(BkgConstants.DRIVER_STATUS_CONFIRM_WAIT.equals(details.get(i-1).getPlanDriverStatus())||BkgConstants.DRIVER_STATUS_EXECUTE_WAIT.equals(details.get(i-1).getPlanDriverStatus()))){
					//你前一个站点状态还未改变，出现异常  details.get(i-1).get
					map.put("success", false);
				}
				breakFlag = true;
			}
			// 说明有到达发车计划中的某一个节点--则将发车计划置为执行中。
			if (breakFlag) {
				dirvingPlan.setStatus(BkgConstants.PLAN_CODE_EXECUTING);
				dirvingPlanService.updateById(dirvingPlan);
				break;
			}
		}
		// 车辆实际并未到达任一站点并且其发车计划状态也不是执行中
		if (!breakFlag) {
			log.info("车辆实际并未到达任一站点,发车计划编号：" + dirvingPlanVo2.getDrivingPlanCode());
			map.put("fail", true);
		}
		return map;
	}
	/**
	* <p>Title:异常打回
	* <p>Description: </p> 
	* @param drivingPlanCode
	* @param exceptionCode
	* @return 
	* @see cn.uce.suc.bkg.biz.infomon.IVisibleTransportBiz#exceptionBack(java.lang.String, java.lang.String)
	 */
	@Transactional(readOnly=false,propagation=Propagation.REQUIRED)
	public int exceptionBack(String drivingPlanCode,String exceptionCode){
		int i=0;
		DirvingPlanVo dirvingPlanVo=new DirvingPlanVo();
		dirvingPlanVo.setDrivingPlanCode(drivingPlanCode);
		dirvingPlanVo.setUtf1(exceptionCode);
		List<ExceptionManager> eList=visibleTransportService.queryExceptionByDrivingPlanCode(dirvingPlanVo);
		if(CollectionUtils.isNotEmpty(eList)){
			ExceptionManager ex=exceptionService.findById(eList.get(0).getId());
			ex.setExceptionStatus(BkgConstants.EXCEPTION_HAS_END);//异常状态变为终止--
			i=exceptionService.updateById(ex);
			
			DirvingPlan dp=dirvingPlanService.findByPlanCode(drivingPlanCode);
			List<DirvingPlanDetail> dpList=dirvingPlanDetailService.findByDrivePlanCode(drivingPlanCode);
			if(dp!=null&&CollectionUtils.isNotEmpty(dpList)){
				DirvingPlan dpNew=new DirvingPlan();
				dpNew.setId(dp.getId());
				dpNew.setAbnormalState(BkgConstants.IS_EXCEPTION_NO);
				//将发车计划号有无异常标识设置为“无异常”
				dirvingPlanService.updateById(dpNew);
				//终止异常发送消息
				if(StringUtils.isNotBlank(dp.getDriverPhone())){
					dp.setDriverPhone(dp.getDriverPhone());
					sendNotice("SYSTEN_EXCEPTION_END_DPT",dp,dp.getId(),BkgConstants.APP_DRIVER_TASK);//发送给司机端
				}
				for(int j=0;j<dpList.size();j++){
					String phoneNum=getSitePhine(dpList.get(j).getWayPointCode());
					dp.setDriverPhone(phoneNum);
					sendNotice("SYSTEN_EXCEPTION_END_DOT",dp,dpList.get(j).getId(),BkgConstants.APP_DRIVING_PLAN_DETAIL);//发送给网点端 
				}
			}
			
			if(CollectionUtils.isNotEmpty(dpList)){
				for(int j=0;j<dpList.size();j++){
					//目前utf3存的是上报异常前的状态
					if(BkgConstants.DRIVER_STATUS_SEND_ERROR.equals(dpList.get(i).getPlanDriverStatus())){
						DirvingPlanDetail dirvingPlanDetail=new DirvingPlanDetail();
						dirvingPlanDetail.setId(dpList.get(i).getId());
						dirvingPlanDetail.setPlanDriverStatus(dpList.get(i).getUtf3());
						//相应发车计划的子状态需返回到异常上报时的状态（暂未实现）。
						dirvingPlanDetailService.updateById(dirvingPlanDetail);
						break;
					}
				}
			}
		
		}
		return i;
	}
	
	/**
	 * @Description: 给司机发送消息重新确认发车计划
	 * @param request
	 * @param response
	 * @return
	 * @author yanglei
	 * @date 2017年11月2日 下午9:58:07
	 */
	private int addSendDirvingPlanNotice(DirvingPlan vo,String driverPhone,String noticeRuleCode) {
		NoticeDetailVo noticeDetailVo=new NoticeDetailVo();
		noticeDetailVo.setNoticeRuleCode(noticeRuleCode);//请尽快确认发车计划!
		noticeDetailVo.setCreateEmp(vo.getUpdateEmp());
		noticeDetailVo.setCreateOrg(vo.getUpdateOrg());
		noticeDetailVo.setCreateTime(vo.getUpdateTime());
		noticeDetailVo.setUserPhone(driverPhone);
		noticeDetailVo.setBusinessId(vo.getId());
		noticeDetailVo.setDisplayWays(BkgConstants.DISPLAY_WAYS_HOME+","+BkgConstants.DISPLAY_WAYS_NOTICE+","+BkgConstants.DISPLAY_WAYS_NEWS);
		int noticeDetailRes =noticeDetailBiz.generateMessage(vo, noticeDetailVo);
		return noticeDetailRes;
	}
	/**
	 * 
	 * @Description:异常确认
	 * @param drivingPlanCode
	 * @param exceptionCode
	 * @return
	 * @author liuhai
	 * @date 2017年12月27日 下午4:06:38
	 */
	public int exceptionConfirm(String drivingPlanCode,String exceptionCode){
		DirvingPlan dpvo=dirvingPlanService.findByrivingPlanCode(drivingPlanCode);
		int i=0;
		DirvingPlanVo dirvingPlanVo=new DirvingPlanVo();
		dirvingPlanVo.setDrivingPlanCode(drivingPlanCode);
		dirvingPlanVo.setUtf1(exceptionCode);
		//查询异常
		List<ExceptionManager> eList=visibleTransportService.queryExceptionByDrivingPlanCode(dirvingPlanVo);
		if(CollectionUtils.isNotEmpty(eList)){
			ExceptionManager ex=exceptionService.findById(eList.get(0).getId());
			ex.setExceptionStatus(BkgConstants.EXCEPTION_HAS_CONFIRM);
			//更新异常
			i=exceptionService.updateById(ex);
		}
		List<DirvingPlanDetail> pcDetail= dirvingPlanDetailService.findByDrivePlanCode(drivingPlanCode);
		if(i>0&&dpvo!=null&&CollectionUtils.isNotEmpty(pcDetail)){
			if(StringUtils.isNotBlank(dpvo.getDriverPhone())){
				dpvo.setDriverPhone(dpvo.getDriverPhone());
				sendNotice("SYSTEN_EXCEPTION_CONFIRM_DPT",dpvo,dpvo.getId(),BkgConstants.APP_DRIVER_TASK);//发送给司机端
			}
			for(int j=0;j<pcDetail.size();j++){
				String phoneNum=getSitePhine(pcDetail.get(j).getWayPointCode());
				dpvo.setDriverPhone(phoneNum);
				sendNotice("SYSTEN_EXCEPTION_CONFIRM_DOT",dpvo,pcDetail.get(j).getId(),BkgConstants.APP_DRIVING_PLAN_DETAIL);//发送给网点端
			}
		}
		return i;
	}
	/**
	 * 终止发车计划
	* <p>Title: stopDrivePlan</p> 
	* <p>Description: </p> 
	* @param drivingPlanCode
	* @return 
	* @see cn.uce.suc.bkg.biz.infomon.IVisibleTransportBiz#stopDrivePlan(java.lang.String)
	 */
	public int stopDrivePlan(String drivingPlanCode){
		int i=0;
		DirvingPlanVo dirvingPlanVo=new DirvingPlanVo();
		dirvingPlanVo.setDrivingPlanCode(drivingPlanCode);
		DirvingPlan plan=dirvingPlanService.findByrivingPlanCode(drivingPlanCode);
		List<DirvingPlanDetail> pcDetail= dirvingPlanDetailService.findByDrivePlanCode(drivingPlanCode);
		if(plan!=null&&CollectionUtils.isNotEmpty(pcDetail)){
			plan.setStatus(BkgConstants.PLAN_CODE_FINISH);//把状态置为 -已终止
			dirvingPlanService.updateById(plan);
			
			if(StringUtils.isNotBlank(plan.getDriverPhone())){
				plan.setDriverPhone(plan.getDriverPhone());
				sendNotice("DRIVER_PLAN_END_DPT",plan,plan.getId(),BkgConstants.APP_DRIVER_TASK);//发送给司机端
			}
			for(int j=0;j<pcDetail.size();j++){
				String phoneNum=getSitePhine(pcDetail.get(j).getWayPointCode());
				plan.setDriverPhone(phoneNum);
				sendNotice("DRIVER_PLAN_END_DOT",plan,pcDetail.get(j).getId(),BkgConstants.APP_DRIVING_PLAN_DETAIL);//发送给网点端
			}
		}
		
		List<ExceptionManager> eList=visibleTransportService.queryExceptionByDrivingPlanCode(dirvingPlanVo);
		if(CollectionUtils.isNotEmpty(eList)){
			ExceptionManager ex=exceptionService.findById(eList.get(0).getId());
			ex.setExceptionStatus(BkgConstants.EXCEPTION_HAS_END); //把该异常状态置为-已终止
			i=exceptionService.updateById(ex);
		}
		return i;
	}
	/**
	 * 通过组织编码查询在执行中的发车计划号
	 * @Description: TODO(这里用一句话描述这个方法的作用) 
	 * @param orgCode
	 * @return
	 * @author liuhai
	 * @date 2017年12月28日 下午3:44:39
	 */
	public List<DirvingPlanVo> queryDirvingPlanByOrgCode(DirvingPlanDetailVo pvd){
		return visibleTransportService.queryDirvingPlanByOrgCode(pvd);
	}
}
