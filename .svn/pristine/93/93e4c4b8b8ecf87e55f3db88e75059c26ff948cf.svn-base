package cn.uce.suc.bkg.control.datamain;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.uce.base.page.Page;
import cn.uce.base.page.Pagination;
import cn.uce.suc.bkg.biz.datamain.ITransportEffectiveBiz;
import cn.uce.suc.bkg.entity.datamain.TransportEffective;
import cn.uce.suc.bkg.vo.datamain.TransportEffectiveVo;
import cn.uce.suc.common.ids.IIdsWorker;
import cn.uce.suc.common.ids.IdsConstants;
import cn.uce.suc.common.ids.IdsConstants.IdsPrefix;
import cn.uce.suc.common.util.DataConversionUtil;
import cn.uce.suc.common.vo.SucCurrentUser;
import cn.uce.web.common.base.BaseController;
import cn.uce.web.common.i18n.Resources;
import cn.uce.web.common.util.ObjectConvertUtil;
import cn.uce.web.common.util.WebUtil;
/**
 * 
 * @Description: 时效管理控制器
 * @author yanglei
 * @date 2017年10月20日 上午10:09:27
 */
@Controller
@RequestMapping("/transportEffective")
public class TransportEffectiveController extends BaseController{
	
	/**
	 * 注入ITransportEffectiveBiz对象
	 */
	@Resource
	private ITransportEffectiveBiz transportEffectiveBiz;
    @Resource
    private IIdsWorker  redisIdsWorker;
	
	@RequestMapping(value = "/forward")
	public String get(HttpServletRequest request, HttpServletResponse response) {
		return "bkg/transportEffective";
	}
	
	@RequestMapping(value = "/findBycondition")
	@ResponseBody
	public Map<String, Object> findByCondition(TransportEffectiveVo transportEffectiveVo, Page page) {
		Pagination<TransportEffectiveVo> pagination = transportEffectiveBiz.findByPagination(transportEffectiveVo, page);
		return returnSuccess(pagination);
	}
	
	@RequestMapping(value = "addTransportEffective")
	@ResponseBody
	public Map<String, Object> addTransportEffective(TransportEffectiveVo transportEffectiveVo, HttpServletRequest request) {
		int count=transportEffectiveBiz.countByVo(transportEffectiveVo);
		if(count>0){
			return returnError(Resources.getMessage("error.bkg.biz.TransportEffective.Exist"));//时效有重复,不能添加
		}
		transportEffectiveVo.setStatus("1");
		Date now=new Date();
		transportEffectiveVo.setCreateTime(now);
		SucCurrentUser userInfo = DataConversionUtil.getUserInfo(WebUtil.getCurrentUser());
		transportEffectiveVo.setCreateEmp(userInfo.getEmpName());
		transportEffectiveVo.setVersion(1);
		transportEffectiveVo.setStatus("1");
		
//		String effectiveCode=redisIdsWorker.nextId(IdsPrefix.SX,toFirstChar(transportEffectiveVo.getStartSite()).toUpperCase(),IdsConstants.YYYY_MM_DD,4);
		String effectiveCode=redisIdsWorker.nextId(IdsPrefix.SX,IdsConstants.YY_MM_DD,5);
		transportEffectiveVo.setEffectiveCode(effectiveCode);
		int res = transportEffectiveBiz.addTransportEffective(transportEffectiveVo);
		if (res > 0) {
			return returnSuccess(Resources.getMessage("common.save.success"));
		}else{
			return returnError(Resources.getMessage("common.save.fail"));
		}
	}
	/**
	 * 
	 * @Description: 修改时效
	 * @param ids
	 * @param lineClassVo
	 * @param request
	 * @return @
	 * @author yanglei
	 * @date 2017年10月20日 下午1:32:17
	 */
	@RequestMapping(value = "updateTransportEffective")
	@ResponseBody
	public Map<String, Object> updateTransportEffective(TransportEffectiveVo transportEffectiveVo, HttpServletRequest request) {
		TransportEffective entity= ObjectConvertUtil.convertObject(transportEffectiveVo, TransportEffective.class);
		entity.setUpdateTime(new Date());
		SucCurrentUser userInfo = DataConversionUtil.getUserInfo(WebUtil.getCurrentUser());
		entity.setUpdateEmp(userInfo.getEmpName());
		int res = transportEffectiveBiz.updateTransportEffective( entity);
		if (res > 0) {
			return returnSuccess(Resources.getMessage("common.save.success"));
		}else{
			return returnError(Resources.getMessage("common.save.fail"));
		}
	}
	
	/**
	 * 
	 * @Description: 修改时效状态
	 * @param ids
	 * @param lineClassVo
	 * @param request
	 * @return @
	 * @author yanglei
	 * @date 2017年10月24日 下午1:32:17
	 */
	@RequestMapping(value = "openUpdatetransportEffectiveStatus")
	@ResponseBody
	public Map<String, Object> openUpdatetransportEffectiveStatus(String id) {
		TransportEffective entity=transportEffectiveBiz.findById(Long.parseLong(id));
		entity.setUpdateTime(new Date());
		SucCurrentUser userInfo = DataConversionUtil.getUserInfo(WebUtil.getCurrentUser());
		entity.setUpdateEmp(userInfo.getEmpName());
		if("1".equals(entity.getStatus())){
			entity.setStatus("0");
		}else{
			entity.setStatus("1");
		}
		int res = transportEffectiveBiz.updateTransportEffective( entity);
		if (res > 0) {
			return returnSuccess(Resources.getMessage("common.save.success"));
		}else{
			return returnError(Resources.getMessage("common.save.fail"));
		}
	}
	
	/**
	 * 
	 * @Description: 刪除时效
	 * @param ids
	 * @param request
	 * @return @
	 * @author yanglei
	 * @date 2017年10月20日 下午1:32:17
	 */
	@RequestMapping(value = "deleteTransportEffective", method=RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> deletePacth(String effectiveIds) {
		String[] ids=effectiveIds.split(",");
		int result=0;
		for(String id : ids){
			transportEffectiveBiz.deleteTransportEffective(Long.parseLong(id));
			result++;
		}
		if(result>0){
			return returnSuccess(Resources.getMessage("common.delete.success"));
		}else{
			return returnError(Resources.getMessage("common.delete.fail"));
		}
	}

}
