package cn.uce.suc.common.service;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import cn.uce.base.page.Page;
import cn.uce.base.page.Pagination;
import cn.uce.suc.common.cache.IATruckModelCacheProcessor;
import cn.uce.suc.common.constants.BkgConstants;
import cn.uce.suc.common.dao.ITruckCostManagementDao;
import cn.uce.suc.common.entity.TruckCostManagement;
import cn.uce.suc.common.vo.TruckCostManagementVo;
import cn.uce.utils.StringUtil;

/**
 * @Description: 车型成本管理Service类
 * @author liwei
 * @date 2017年10月31日 下午01:36:11
 */
@Service("truckCostManagementService")
public class TruckCostManagementService {
	
	/**
	 * 注入车型成本管理Dao
	 */
	@Resource
	private ITruckCostManagementDao truckCostManagementDao;
	
	/**
	 * @Description: 新增车型成本管理
	 * @param truckCostManagement 车型成本管理
	 * @return 受影响行数
	 * @author liwei
	 * @date 2017年10月31日 下午01:36:11
	 */
	public int addTruckCostManagement(TruckCostManagement truckCostManagement) {
		int rec = truckCostManagementDao.insert(truckCostManagement);
		if (rec > 0 && null != truckCostManagement && StringUtil.isNotBlank(truckCostManagement.getBelongSiteCode())
				&& StringUtil.isNotBlank(truckCostManagement.getTruckType())) {
			//刷新缓存
			IATruckModelCacheProcessor.refresh(truckCostManagement.getBelongSiteCode() + BkgConstants.UNDER_LINE + truckCostManagement.getTruckType());
		}
		return rec;
	}
	
	/**
	 * @Description: 修改车型成本管理
	 * @param truckCostManagement 车型成本管理
	 * @return 受影响行数
	 * @author liwei
	 * @date 2017年10月31日 下午01:36:11
	 */
	public int updateById(TruckCostManagement truckCostManagement) {
		//因为前台页面可以修改所属分拨，，索引这里刷新缓存即要刷新旧的缓存也要刷新新的缓存 分拨_需求类型
		Long id = truckCostManagement.getId();
		String oldCacheKey = "";
		if (null != id) {
			TruckCostManagement old = findById(id);
			if (null != old) {
				oldCacheKey = old.getBelongSiteCode() + BkgConstants.UNDER_LINE + old.getTruckType();
			}
		}
		int rec = truckCostManagementDao.updateById(truckCostManagement);
		if (rec > 0) {
			if (StringUtil.isNotBlank(truckCostManagement.getBelongSiteCode())
					&& StringUtil.isNotBlank(truckCostManagement.getTruckType())) {
				String newCacheKey = truckCostManagement.getBelongSiteCode() + BkgConstants.UNDER_LINE + truckCostManagement.getTruckType();
				if (!oldCacheKey.equals(newCacheKey)) {
					//刷新缓存
					IATruckModelCacheProcessor.refresh(oldCacheKey);
				}
				//刷新缓存
				IATruckModelCacheProcessor.refresh(newCacheKey);
			}
		}
		return rec;
	}
	
	/**
	 * @Description: 删除车型成本管理
	 * @param id 主键
	 * @return 受影响行数
	 * @author liwei
	 * @date 2017年10月31日 下午01:36:11
	 */
	public int deleteById(Long id) {
		TruckCostManagement old = truckCostManagementDao.findById(id);
		int rec = truckCostManagementDao.deleteById(id);
		if (rec > 0 && null != old && StringUtil.isNotBlank(old.getBelongSiteCode())&& StringUtil.isNotBlank(old.getTruckType())) {
			//刷新缓存
			IATruckModelCacheProcessor.refresh(old.getBelongSiteCode() + BkgConstants.UNDER_LINE + old.getTruckType());
		}
		return rec;
	}
	
	/**
	 * @Description: 根据ID查询车型成本管理
	 * @param id 主键
	 * @return 车型成本管理
	 * @author liwei
	 * @date 2017年10月31日 下午01:36:11
	 */
	public TruckCostManagement findById(Long id) {
		return truckCostManagementDao.findById(id);
	}
	
	/**
	 * @Description: 分页查询车型成本管理
	 * @param truckCostManagementVo 车型成本管理
	 * @param page 分页参数
	 * @return 车型成本管理
	 * @author liwei
	 * @date 2017年10月31日 下午01:36:11
	 */
	public Pagination<TruckCostManagement> findByPagination(TruckCostManagementVo truckCostManagementVo, Page page) {
		Pagination<TruckCostManagement> paginationTruckCostManagement = truckCostManagementDao.findByPagination(truckCostManagementVo, page);
		return paginationTruckCostManagement;
	}
	/**
	 * @Description: 查询所有 当前 网点所属分拨的 临时需求的 车型成本
	 * @param truckCostManagementVo 车型成本管理
	 * @param page 分页参数
	 * @return 车型成本管理
	 * @author liwei
	 * @date 2017年10月31日 下午01:36:11
	 */
	public List<TruckCostManagementVo> findByBelongSiteCode(TruckCostManagementVo truckCostManagementVo) {
		List<TruckCostManagementVo> truckCostManagements = truckCostManagementDao.findByBelongSiteCode(truckCostManagementVo);
		return truckCostManagements;
	}

	  /**
	   * 
	   * @Description: 根据组合查询车型及体积 ，算法调用
	   * @param truckCostManagementVo
	   * @return
	   * @author laizhendong
	   * @date 2017年10月29日 上午10:10:51
	   */
	  public List<TruckCostManagementVo> findByCombine(TruckCostManagementVo truckCostManagementVo){
	    return truckCostManagementDao.findByCombine(truckCostManagementVo);
	  }

		/**
		 * @Description: 查询该车型管理号的最大版本号
		 * @param truckManageCode 车型管理号
		 * @return 车型成本管理的max版本
		 * @author 
		 * @date 2017年10月31日 下午01:36:11
		 */
	public Long getMaxVersion(String truckManageCode) {
		return truckCostManagementDao.getMaxVersion(truckManageCode);
	}
	
	/**
	 * 
	 * @Description: TODO(这里用一句话描述这个方法的作用) 
	 * @param capacityManagements
	 * @return
	 * @author liwei
	 * @date 2017年11月3日 下午9:19:25
	 */
	public int updateDetailsStatusByIds(List<TruckCostManagement>  capacityManagements){
		Set<String> set = new HashSet<String>();
		for (TruckCostManagement upd : capacityManagements) {
			Long id = upd.getId();
			TruckCostManagement updTruckCostManagement = findById(id);
			if (null != updTruckCostManagement) {
				set.add(updTruckCostManagement.getBelongSiteCode() + BkgConstants.UNDER_LINE + updTruckCostManagement.getTruckType());
			}
		}
		int rec = truckCostManagementDao.updateById(capacityManagements);
		//刷新缓存
		if (rec > 0 && !set.isEmpty()) {
			for (String key : set) {
				IATruckModelCacheProcessor.refresh(key);
			}
		}
		return rec;
		
	}
	  /**
	   * 
	   * @Description: 根据条件查询车型成本 
	   * @param truckCostManagementVo
	   * @return
	   * @author laizhendong
	   * @date 2017年11月6日 上午11:10:36
	   */
	  public List<TruckCostManagementVo> findByCondition(TruckCostManagementVo truckCostManagementVo){
		  return truckCostManagementDao.findByCondition(truckCostManagementVo);
	  }
	  /**
	 	 * 
	 	 * @Description: 车型版本号数据未作修改，版本升级
	 	 * @param ids  
	 	 * @return 修改的条数
	 	 * @author haizhou
	 	 * @date 2017年11月6日 下午3:11:00
	 	 */
	public int versionUpByIds(List<TruckCostManagement> truckCostManagements) {
		int val= truckCostManagementDao.insert(truckCostManagements);
		if (null != truckCostManagements && !truckCostManagements.isEmpty()) {
			Set<String> set = new HashSet<String>();
			for (TruckCostManagement upd : truckCostManagements) {
				set.add(upd.getBelongSiteCode() + BkgConstants.UNDER_LINE + upd.getTruckType());
			}
			if (!set.isEmpty()) {
				for (String key : set) {
					IATruckModelCacheProcessor.refresh(key);
				}
			}
		}
		return val;
	}
	/**
	 * 
	 * @Description: 车型车本名称下拉
	 * @param carrierInfoVo
	 * @param page
	 * @return
	 * @author haizhou
	 * @date 2017年11月7日 下午5:57:39
	 */
	public Pagination<TruckCostManagement> getByTruckCostName(
			TruckCostManagementVo truckCostManagementVo, Page page) {
		return truckCostManagementDao.getByTruckCostName(truckCostManagementVo,page);
	}
	
	
}