package cn.uce.suc.bkg.service.datamain;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import cn.uce.base.page.Page;
import cn.uce.base.page.Pagination;
import cn.uce.suc.bkg.entity.datamain.Dirver;
import cn.uce.suc.bkg.vo.datamain.DirverVo;
import cn.uce.suc.bkg.dao.datamain.IDirverDao;

/**
 * @Description: 司机Service类
 * @author UCE-CodeGenerator
 * @date 2017年10月30日 下午07:29:39
 */
@Service("dirverService")
public class DirverService {
	
	/**
	 * 注入司机Dao
	 */
	@Resource
	private IDirverDao dirverDao;
	
	/**
	 * @Description: 新增司机
	 * @param dirver 司机
	 * @return 受影响行数
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	public int addDirver(Dirver dirver) {
		return dirverDao.insert(dirver);
	}
	
	/**
	 * @Description: 修改司机
	 * @param dirver 司机
	 * @return 受影响行数
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	public int updateById(Dirver dirver) {
		return dirverDao.updateById(dirver);
	}
	
	/**
	 * @Description: 删除司机
	 * @param id 主键
	 * @return 受影响行数
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	public int deleteById(Long id) {
		return dirverDao.deleteById(id);
	}
	
	/**
	 * @Description: 根据ID查询司机
	 * @param id 主键
	 * @return 司机
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	public Dirver findById(Long id) {
		return dirverDao.findById(id);
	}
	
	/**
	 * @Description: 分页查询司机
	 * @param dirverVo 司机
	 * @param page 分页参数
	 * @return 司机
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	public Pagination<Dirver> findByPagination(DirverVo dirverVo, Page page) {
		Pagination<Dirver> paginationDirver = dirverDao.findByPagination(dirverVo, page);
		return paginationDirver;
	}
	/**
	 * 
	 * @Description: 根据条件查询司机
	 * @param dirverVo
	 * @param page
	 * @return
	 * @author zhangqiang
	 * @date 2017年10月31日 上午9:51:11
	 */
	public Pagination<Dirver> findByCondition(DirverVo dirverVo, Page page){
		Pagination<Dirver> pagination = dirverDao.findByCondition(dirverVo, page);
		return pagination;
	}
	/**
	 * 
	 * @Description: 导出司机信息
	 * @param dirverVo
	 * @return
	 * @author zhangqiang
	 * @date 2017年10月31日 下午2:50:31
	 */
	public List<DirverVo> findByExport(DirverVo dirverVo){
		List<DirverVo> list = dirverDao.findByExport(dirverVo);
		return list;
	}
	/**
	 * 
	 * @Description: 司机下拉 
	 * @param dirverVo
	 * @param page
	 * @return
	 * @author zhangqiang
	 * @date 2017年11月1日 下午5:39:04
	 */
	public Pagination<Dirver> findDriverByCmbgd(DirverVo dirverVo, Page page){
		Pagination<Dirver> driver = dirverDao.findDriverByCmbgd(dirverVo, page);
		return driver;
	}
	/**
	 * 
	 * @Description: 根据驾驶证号查询是否司机绑定车辆
	 * @param drivingNum
	 * @return
	 * @author zhangqiang
	 * @date 2017年11月2日 下午5:43:20
	 */
	public List<Dirver> findByDrivingNum(String drivingNum){
		List<Dirver> list = dirverDao.findByDrivingNum(drivingNum);
		return list;
	}
	/**
	 * 
	 * @Description: 根据承运商ID 查询司机表的司机
	 * @param id
	 * @return
	 * @author haizhou
	 * @date 2017年11月4日 下午5:43:20
	 */
	public List<Dirver> findByCarrierId(String carrierId) {
		
		List<Dirver> list=dirverDao.findByCarrierId(carrierId);
		return list;
		
	}
}