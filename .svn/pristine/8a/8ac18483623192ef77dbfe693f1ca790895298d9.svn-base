package cn.uce.suc.bkg.biz.impl.datamain;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;

import cn.uce.base.page.Page;
import cn.uce.base.page.Pagination;
import cn.uce.suc.bkg.biz.datamain.IDirverBiz;
import cn.uce.suc.bkg.entity.datamain.Dirver;
import cn.uce.suc.bkg.exception.BkgModuleException;
import cn.uce.suc.bkg.vo.datamain.DirverVo;
import cn.uce.suc.bkg.service.datamain.DirverService;
import cn.uce.suc.common.biz.imp.MobileuserBiz;
import cn.uce.suc.common.constants.BkgConstants;
import cn.uce.suc.common.constants.SucConstants;
import cn.uce.suc.common.service.NoticePushService;
import cn.uce.suc.common.vo.MobileuserVo;

/**
 * @Description: 司机BIZ实现类
 * @author UCE-CodeGenerator
 * @date 2017年10月30日 下午07:29:39
 */
@Service("dirverBiz")
@Transactional(readOnly = true,propagation=Propagation.SUPPORTS)
public class DirverBiz implements IDirverBiz {
	
	/**
	 * 注入司机Service
	 */
	@Resource
	private DirverService dirverService;
	/**
	 * 用户管理
	 */
	@Resource
	private MobileuserBiz mobileuserBiz;
	/**
	 * 短信推送服务
	 */
	@Resource
	private NoticePushService noticePushService;
	
	/**
	 * @Description: 新增司机
	 * @param dirver
	 * @return 受影响行数
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	@Transactional(readOnly=false,propagation=Propagation.REQUIRED)
	public int addDirver(Dirver dirver) {
		//设置版本号初始值
		dirver.setVersion(1);
		return dirverService.addDirver(dirver);
	}
	
	/**
	 * @Description: 修改司机
	 * @param dirver 司机
	 * @return 受影响行数
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	@Transactional(readOnly=false,propagation=Propagation.REQUIRED)
	public int updateDirver(Dirver dirver) {
		checkVersion(dirver);
		return dirverService.updateById(dirver);
	}
	/**
	 * 
	 * @Description: 修改数据检查版本号确定是否并发操作
	 * @author zhangqiang
	 * @date 2017年11月22日 下午1:54:19
	 */
	private void checkVersion(Dirver dirver){
		//传入对象非空
		if(dirver == null) {
			throw new BkgModuleException("concurrency.ontrol.data.is.not.exist");
		}
		Dirver d = findById(dirver.getId());
		if(d == null){
			//不存在异常
			throw new BkgModuleException("concurrency.ontrol.data.is.not.exist");
		}
		//版本号发生变化
		if(!d.getVersion().equals(dirver.getVersion())){
			throw new BkgModuleException("concurrency.ontrol.data.is.change");
		}
	}
	/**
	 * @Description: 删除司机
	 * @param id 主键
	 * @return 受影响行数
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	@Transactional(readOnly=false,propagation=Propagation.REQUIRED)
	public int deleteDirver(Long id) {
		return dirverService.deleteById(id);
	}
	
	/**
	 * @Description: 根据ID查询司机
	 * @param id 主键
	 * @return 司机
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	@Override
	public Dirver findById(Long id) {
		return dirverService.findById(id);
	}
	
	/**
	 * @Description: 分页查询司机
	 * @param dirverVo 司机
	 * @param page 分页参数
	 * @return 司机
	 * @author UCE-CodeGenerator
	 * @date 2017年10月30日 下午07:29:39
	 */
	public Pagination<Dirver> findByPagination(DirverVo dirverVo, Page page) {
		Pagination<Dirver> pagination = dirverService.findByPagination(dirverVo, page);
		return pagination;
	}
	/**
	 * 
	 * @Description: 根据条件查询司机
	 * @param dirverVo
	 * @param page
	 * @return
	 * @author zhangqiang
	 * @date 2017年10月31日 上午9:51:11
	 */
	public Pagination<Dirver> findByCondition(DirverVo dirverVo, Page page){
		Pagination<Dirver> pagination = dirverService.findByCondition(dirverVo, page);
		return pagination;
	}
	/**
	 * 
	 * @Description: 导出司机信息
	 * @param dirverVo
	 * @return
	 * @author zhangqiang
	 * @date 2017年10月31日 下午2:50:31
	 */
	public List<DirverVo> findByExport(DirverVo dirverVo){
		List<DirverVo> list = dirverService.findByExport(dirverVo);
		return list;
	}
	/**
	 * 
	 * @Description: 司机下拉 
	 * @param dirverVo
	 * @param page
	 * @return
	 * @author zhangqiang
	 * @date 2017年11月1日 下午5:39:04
	 */
	public Pagination<Dirver> findDriverByCmbgd(DirverVo dirverVo, Page page){
		Pagination<Dirver> driver = dirverService.findDriverByCmbgd(dirverVo, page);
		return driver;
	}
	/**
	 * 
	 * @Description: 根据驾驶证号查询是否司机绑定车辆
	 * @param drivingNum
	 * @return
	 * @author zhangqiang
	 * @date 2017年11月2日 下午5:43:20
	 */
	public List<Dirver> findByDrivingNum(String drivingNum){
		List<Dirver> list = dirverService.findByDrivingNum(drivingNum);
		return list;
	}
	/**
	 * 
	 * @Description: 生成自己用户
	 * @author liwei
	 * @date 2017年12月26日 上午9:43:29
	 */
	@Override
	public void createDriverUser(MobileuserVo mobileuserVo) {
		//平台端生成用户，需强制修改密码
		mobileuserVo.setUtf1(BkgConstants.FORCE_MODIFY_PASSWORD_TRUE_FIRST);
		/**校验是否存在当前司机用户*/
		mobileuserVo.setUserType(SucConstants.CAPTCH_PLATFORM_DPT);
		mobileuserVo.setCertifiFlag(true);
		mobileuserBiz.addMobileuser(mobileuserVo);
		// 封装参数
		String RequeParams = noticePushService.initParams(SucConstants.CAPTCH_USER_ADD, mobileuserVo,
				mobileuserVo.getMobilephone(), SucConstants.CAPTCH_PLATFORM_DPT);

		// String url = "http://113.106.93.46/smsc/smsp/sendMessage.action";
		noticePushService.sendMessageToPhone(RequeParams);
	}
}