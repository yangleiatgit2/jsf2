package cn.uce.suc.bkg.service.datamain;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import cn.uce.base.page.Page;
import cn.uce.base.page.Pagination;
import cn.uce.suc.bkg.cache.IATransportEffectiveCacheProcessor;
import cn.uce.suc.bkg.dao.datamain.IDeliveryRelationDao;
import cn.uce.suc.bkg.entity.datamain.DeliveryRelation;
import cn.uce.suc.bkg.vo.datamain.DeliveryRelationVo;
import cn.uce.suc.common.cache.IADcSubOrgCacheProcessor;
import cn.uce.utils.StringUtil;

/**
 * @Description: 交货关系Service类
 * @author UCE-CodeGenerator
 * @date 2017年11月28日 下午01:52:42
 */
@Service("deliveryRelationService")
public class DeliveryRelationService {

	/**
	 * 注入交货关系Dao
	 */
	@Resource
	private IDeliveryRelationDao deliveryRelationDao;

	/**
	 * 注：目前时效和集货点的缓存信息是根据交货关系来维护的，所以在新增、修改、删除交货关系时要刷新对应的缓存
	 * @Description: 新增交货关系
	 * @param deliveryRelation
	 *            交货关系
	 * @return 受影响行数
	 * @author UCE-CodeGenerator
	 * @date 2017年11月28日 下午01:52:42
	 */
	public int addDeliveryRelation(DeliveryRelation deliveryRelation) {
		int rec = deliveryRelationDao.insert(deliveryRelation);
		if (rec > 0) {
			String workcenterCode = deliveryRelation.getWorkcenterCode();
			//时效是根据网点交货关系做缓存主键的，所以修改交货关系时要刷新缓存
			IATransportEffectiveCacheProcessor.refresh(workcenterCode);
			//刷新集货点缓存
			IADcSubOrgCacheProcessor.refresh(workcenterCode);
		}
		return rec;
	}

	/**
	 * @Description: 修改交货关系
	 * @param deliveryRelation
	 *            交货关系
	 * @return 受影响行数
	 * @author UCE-CodeGenerator
	 * @date 2017年11月28日 下午01:52:42
	 */
	public int updateById(DeliveryRelation deliveryRelation) {
		DeliveryRelation oldDeliveryRelation = findById(deliveryRelation.getId());
		int rec =deliveryRelationDao.updateById(deliveryRelation);
		if (rec > 0) {
			//页面是中心和网点都可以修改的，所以不是同一个中心的话要刷新两次
			String oldWorkCenterCode = oldDeliveryRelation.getWorkcenterCode();
			String newWorkCenterCode = deliveryRelation.getWorkcenterCode();
			if (StringUtil.isNotBlank(newWorkCenterCode) && !oldWorkCenterCode.equals(newWorkCenterCode)) {
				IATransportEffectiveCacheProcessor.refresh(newWorkCenterCode);
				//刷新集货点缓存
				IADcSubOrgCacheProcessor.refresh(newWorkCenterCode);
			}
			IATransportEffectiveCacheProcessor.refresh(oldWorkCenterCode);
			//刷新集货点缓存
			IADcSubOrgCacheProcessor.refresh(oldWorkCenterCode);
		}
		return rec;
	}

	/**
	 * @Description: 删除交货关系
	 * @param id
	 *            主键
	 * @return 受影响行数
	 * @author UCE-CodeGenerator
	 * @date 2017年11月28日 下午01:52:42
	 */
	public int deleteById(Long id) {
		DeliveryRelation oldDeliveryRelation = findById(id);
		int rec = deliveryRelationDao.deleteById(id);
		if (rec > 0) {
			String oldWorkCenterCode = oldDeliveryRelation.getWorkcenterCode();
			//刷新时效缓存
			IATransportEffectiveCacheProcessor.refresh(oldDeliveryRelation.getWorkcenterCode());
			//刷新集货点缓存
			IADcSubOrgCacheProcessor.refresh(oldWorkCenterCode);
		}
		return rec;
	}

	/**
	 * @Description: 根据ID查询交货关系
	 * @param id
	 *            主键
	 * @return 交货关系
	 * @author UCE-CodeGenerator
	 * @date 2017年11月28日 下午01:52:42
	 */
	public DeliveryRelation findById(Long id) {
		return deliveryRelationDao.findById(id);
	}

	/**
	 * @Description: 分页查询交货关系
	 * @param deliveryRelationVo
	 *            交货关系
	 * @param page
	 *            分页参数
	 * @return 交货关系
	 * @author UCE-CodeGenerator
	 * @date 2017年11月28日 下午01:52:42
	 */
	public Pagination<DeliveryRelation> findByPagination(DeliveryRelationVo deliveryRelationVo, Page page) {
		Pagination<DeliveryRelation> paginationDeliveryRelation = deliveryRelationDao.findByPagination(
				deliveryRelationVo, page);
		return paginationDeliveryRelation;
	}

	/**
	 * 
	 * @Description: 批量删除
	 * @param ids
	 * @return
	 * @author wangzhijun
	 * @date 2017年11月28日 下午2:23:39
	 */
	public int deleteBatch(String ids) {
		DeliveryRelationVo deliveryRelationVo = new DeliveryRelationVo();
		//分割
		String[] idArray = ids.split(",");
		deliveryRelationVo.setIds(idArray);
		//分拨中心的set
		Set<String> set = new HashSet<String>();
		for (String id : idArray) {
			DeliveryRelation old = findById(Long.parseLong(id));
			if (old != null) {
				//放到set
				set.add(old.getWorkcenterCode());
			}
		}
		//批量删除
		int rec = deliveryRelationDao.deleteBatch(deliveryRelationVo);
		if (rec > 0) {
			//遍历刷新
			for (String workCenterCode : set) {
				IATransportEffectiveCacheProcessor.refresh(workCenterCode);
				//刷新集货点缓存
				IADcSubOrgCacheProcessor.refresh(workCenterCode);
			}
		}
		return rec;
	}
	
	/**
	 * 
	 * @Description: 根据条件查询查询交货关系
	 * @param deliveryRelationVo
	 * @return
	 * @author laizhendong
	 * @date 2017年12月7日 下午2:11:10
	 */
	public List<DeliveryRelationVo> findByCondition(DeliveryRelationVo deliveryRelationVo){
		return deliveryRelationDao.findByCondition(deliveryRelationVo);
	}
}